<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhaoqing的个人博客</title>
  
  <subtitle>知足者,不知足也,不知足者,知足也!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zqhf.github.io/"/>
  <updated>2018-07-25T09:56:37.452Z</updated>
  <id>https://zqhf.github.io/</id>
  
  <author>
    <name>zhaoqing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>上传本地项目到Github的详细步骤(附EHcache配置文件的配置参数说明)</title>
    <link href="https://zqhf.github.io/2018/07/19/article11/"/>
    <id>https://zqhf.github.io/2018/07/19/article11/</id>
    <published>2018-07-19T04:12:49.000Z</published>
    <updated>2018-07-25T09:56:37.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="将本地项目上传到Github的几个详细步骤"><a href="#将本地项目上传到Github的几个详细步骤" class="headerlink" title="将本地项目上传到Github的几个详细步骤"></a>将本地项目上传到Github的几个详细步骤</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.git init</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.git add .</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.git commit -m &quot;first commit&quot;  (first commit 本次提交的内容)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.git remote add origin https://github.com/852172891/test3.git (地址换成你建的项目的地址,不知道的话看下边 项目地址是哪个的图)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.git pull origin master(先拉下来合并)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6.git push -u origin master(合并后提交)</span><br></pre></td></tr></table></figure><p>ehcache.xml的各参数说明。<br>diskStore ：指定数据存储位置,可指定磁盘中的文件夹位置<br>defaultCache ： 默认的管理策略<br>以下属性是必须的：name： Cache的名称,必须是唯一的(ehcache会把这个cache放到HashMap里)。maxElementsInMemory：在内存中缓存的element的最大数目。<br>maxElementsOnDisk：在磁盘上缓存的element的最大数目,默认值为0,表示不限制。<br>eternal：设定缓存的elements是否永远不过期。如果为true,则缓存的数据始终有效,如果为false那么还要根据timeToIdleSeconds,timeToLiveSeconds判断。<br>overflowToDisk： 如果内存中数据超过内存限制,是否要缓存到磁盘上。<br>以下属性是可选的：<br>timeToIdleSeconds： 对象空闲时间,指对象在多长时间没有被访问就会失效。只对eternal为false的有效。默认值0,表示一直可以访问。<br>timeToLiveSeconds： 对象存活时间,指对象从创建到失效所需要的时间。只对eternal为false的有效。默认值0,表示一直可以访问。<br>diskPersistent： 是否在磁盘上持久化。指重启jvm后,数据是否有效。默认为false。<br>diskExpiryThreadIntervalSeconds： 对象检测线程运行时间间隔。标识对象状态的线程多长时间运行一次。<br>diskSpoolBufferSizeMB： DiskStore使用的磁盘大小,默认值30MB。每个cache使用各自的DiskStore。<br>memoryStoreEvictionPolicy： 如果内存中数据超过内存限制,向磁盘缓存时的策略。默认值LRU,可选FIFO、LFU。<br>缓存的3 种清空策略 ：<br>FIFO：first in first out (先进先出).<br>LFU：Less Frequently Used (最少使用).意思是一直以来最少被使用的。缓存的元素有一个hit 属性,hit 值最小的将会被清出缓存。<br>LRU：Least Recently Used(最近最少使用). (ehcache 默认值).缓存的元素有一个时间戳,当缓存容量满了,而又需要腾出地方来缓存新的元素的时候,那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;将本地项目上传到Github的几个详细步骤&quot;&gt;&lt;a href=&quot;#将本地项目上传到Github的几个详细步骤&quot; class=&quot;headerlink&quot; title=&quot;将本地项目上传到Github的几个详细步骤&quot;&gt;&lt;/a&gt;将本地项目上传到Github的几个详细步骤&lt;/
      
    
    </summary>
    
      <category term="技术分享" scheme="https://zqhf.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="技术分享" scheme="https://zqhf.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>java集成solrCloud(solr+zookeeper集群)遇到的几个问题</title>
    <link href="https://zqhf.github.io/2018/06/11/article10/"/>
    <id>https://zqhf.github.io/2018/06/11/article10/</id>
    <published>2018-06-11T05:12:33.000Z</published>
    <updated>2018-06-11T05:47:29.197Z</updated>
    
    <content type="html"><![CDATA[<p>今天在做java集成solrCloud(solr+zookeeper集群)时,遇到了几个问题,特在此做下记录,以便以后遇到类似的问题时方便查阅。</p><h2 id="1-出现的问题如下"><a href="#1-出现的问题如下" class="headerlink" title="1.出现的问题如下:"></a>1.出现的问题如下:</h2><img src="/2018/06/11/article10/2.png"><p>提示在xx秒内连不上zookeeper服务器,查看zookeeper服务器发现状态是正常启动的,配置也没问题,这就奇怪了,于是查看zookeeper的日志,发现有如下报错:<br><img src="/2018/06/11/article10/1.png"><br>也就是说很诡异的服务不断断开和重连,在网上百度了一通,原因众说纷纭,依然没有解决,后来在网上的一个问答里面不显眼的地方才看到了一位网友说的问题:<br>服务器上zookeeper的jar包版本与客户端的jar包不匹配(我的服务器上zookeeper是3.4.6,客户端是3.4.5)，于是修改jar包使之匹配，问题解决。在此要感谢那位热心的网友。</p><h2 id="2-客户端出现的问题如下"><a href="#2-客户端出现的问题如下" class="headerlink" title="2.客户端出现的问题如下:"></a>2.客户端出现的问题如下:</h2><img src="/2018/06/11/article10/3.PNG"><p>查看服务器日志,有如下报错<br><img src="/2018/06/11/article10/4.PNG"><br>于是就知道问题所在了,只需修改solr的配置文件schema.xml使之与客户端字段相同即可。如下图,注意大小写<br><img src="/2018/06/11/article10/5.PNG"><br>最后总结一下:<br>java集成solrCloud(solr+zookeeper集群)在网上有很多教程也有现成的代码,相对来说比较简单,但是可能从中也会遇到很多奇怪的问题,这就需要我们认真仔细并多查阅资料,总结经验,这样以后就可以避免类似的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在做java集成solrCloud(solr+zookeeper集群)时,遇到了几个问题,特在此做下记录,以便以后遇到类似的问题时方便查阅。&lt;/p&gt;
&lt;h2 id=&quot;1-出现的问题如下&quot;&gt;&lt;a href=&quot;#1-出现的问题如下&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="技术分享" scheme="https://zqhf.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="技术分享" scheme="https://zqhf.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>java集成支付宝支付</title>
    <link href="https://zqhf.github.io/2018/05/29/article9/"/>
    <id>https://zqhf.github.io/2018/05/29/article9/</id>
    <published>2018-05-29T02:16:06.000Z</published>
    <updated>2018-07-02T01:40:59.332Z</updated>
    
    <content type="html"><![CDATA[<p>前几天一直在研究java集成支付宝支付,今天就把研究成果分享一下,也便于以后遇到需要集成支付宝支付的时候,可以很快就集成出来。</p><h2 id="1-准备一个支付宝账号-登录蚂蚁金服开放平台-按照下图步骤-创建好应用-添加相应需要开发集成的支付功能-搭建好开发环境。"><a href="#1-准备一个支付宝账号-登录蚂蚁金服开放平台-按照下图步骤-创建好应用-添加相应需要开发集成的支付功能-搭建好开发环境。" class="headerlink" title="1.准备一个支付宝账号,登录蚂蚁金服开放平台,按照下图步骤,创建好应用,添加相应需要开发集成的支付功能,搭建好开发环境。"></a>1.准备一个支付宝账号,登录蚂蚁金服开放平台,按照下图步骤,创建好应用,添加相应需要开发集成的支付功能,搭建好开发环境。</h2><img src="/2018/05/29/article9/1.PNG"><h3 id="1-1-此处重点讲一下配置应用环境时开发环境的配置-如下图"><a href="#1-1-此处重点讲一下配置应用环境时开发环境的配置-如下图" class="headerlink" title="1.1.此处重点讲一下配置应用环境时开发环境的配置,如下图"></a>1.1.此处重点讲一下配置应用环境时开发环境的配置,如下图</h3><img src="/2018/05/29/article9/2.PNG"><p>1.支付网关:图中所示的支付网关是正式环境的支付网关,也就是应用上线以后用真正的支付宝进行支付的应用网关。我们在开发阶段不急集成正式环境<br>,所以蚂蚁金服特地为我们准备了沙箱环境,沙箱环境的支付网关为<a href="https://openapi.alipaydev.com/gateway.do,待应用开发完成,换成正式网关即可。" target="_blank" rel="noopener">https://openapi.alipaydev.com/gateway.do,待应用开发完成,换成正式网关即可。</a><br>2.应用网关:我们在生成订单以后,需要调用支付宝进行支付,如果支付成功,支付宝就会主动通知我们自身的系统支付结果,这个应用网关就是我们在调用<br>支付宝支付时传给支付宝的(支付宝有了他就可以把支付结果通知给我们)。应用网关必须外网可以访问,关于如何把内网转化为外网可以访问,网上有很多<br>教程,这里不做讲述。<br>3.授权回调地址:如果我们是服务商,替商家开发集成支付宝支付的时候,需要商家给我们授权,这就好比你用微信或者其他应用的信息登录另一款APP的时候<br>,会提示需要访问你的一些资料,需要你授权一样,这个地址,就是商家给我们授权以后,支付宝主动通知我们授权结果的地址。授权流程如下图<br><img src="/2018/05/29/article9/3.PNG"><br>我们需要拼接授权链接给商户,由商户点击链接进行授权正式环境的授权链接；<a href="https://openauth.alipay.com/oauth2/appToAppAuth.htm?app_id=2015101400446982&amp;redirect_uri=http%3A%2F%2Fexample.com" target="_blank" rel="noopener">https://openauth.alipay.com/oauth2/appToAppAuth.htm?app_id=2015101400446982&amp;redirect_uri=http%3A%2F%2Fexample.com</a><br>其中app_id为正式环境的app_id,redirect_uri就是上述的授权回调地址沙箱环境的授权链接:<a href="https://openauth.alipaydev.com/oauth2/appToAppAuth.htm?app_id=APPID&amp;redirect_uri=REDIRECT_URI" target="_blank" rel="noopener">https://openauth.alipaydev.com/oauth2/appToAppAuth.htm?app_id=APPID&amp;redirect_uri=REDIRECT_URI</a><br>其中app_id为沙箱环境的app_id,redirect_uri就是上述的授权回调地址<br>通过商家授权以后,最终我们会调用支付宝的接口获取到最终的授权令牌,通过该令牌替商家发起支付宝的下单,支付,退款,查询等请求。<br>4.接口加签方式:可以参照开放平台上的步骤,去下载加签工具,然后生成自己的私钥和公钥.并将公钥设置到此处,私钥自己严加保存。</p><h2 id="2-开发环境搭建好以后-接下来就可以利用开发文档进行开发了-此处只以开发电脑网站支付功能为例进行讲解-其他功能类似。"><a href="#2-开发环境搭建好以后-接下来就可以利用开发文档进行开发了-此处只以开发电脑网站支付功能为例进行讲解-其他功能类似。" class="headerlink" title="2.开发环境搭建好以后,接下来就可以利用开发文档进行开发了.此处只以开发电脑网站支付功能为例进行讲解,其他功能类似。"></a>2.开发环境搭建好以后,接下来就可以利用开发文档进行开发了.此处只以开发电脑网站支付功能为例进行讲解,其他功能类似。</h2><p>开放平台上有各个功能的相关demo,下载下来以后集成到代码中即可,比较简单,下载下来demo以后<br>首先看看配置类<br>package cn.mrdear.pay.alipay;<br>import java.io.FileWriter;<br>import java.io.IOException;</p><p>/<em> </em><br> <em>类名：AlipayConfig </em>功能：基础配置类<br> <em>详细：设置帐户有关信息及返回路径 </em>修改日期：2018-05-29<br> <em>说明： </em>以下代码只是为了方便商户测试而提供的样例代码，商户可以根据自己网站的需要，按照技术文档编写,并非一定要使用该代码。<br> <em>该代码仅供学习和研究支付宝接口使用，只是提供一个参考。 </em>/</p><p>public class AliPayConfig {</p><p>//↓↓↓↓↓↓↓↓↓↓请在这里配置您的基本信息↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</p><pre><code>// 应用ID,您的APPID，收款账号既是您的APPID对应支付宝账号public static String app_id = &quot;&quot;;// 商户私钥，您的PKCS8格式RSA2私钥public static String merchant_private_key = &quot;MIIFvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDGL8zD8CqRDLxwsA5QKVZqdsyKVIwHF4y2rclIpl5W5BB3caO7oV9f1i/MsLzAsSqHIsuqaidcYQ/bjwEn1Q2nCUcf2VA3HndC2yAj97uD65VMBYDFKvealWyvSfTtJIi4lnObXxJdPDv+4WbrxMgIBdohz/pGON82gAPzcMmZOb8Xxn3JqRe55Pjy6h1IaAPCar3TCqDMfLzrGo03OYr01Tu+aDVk/d32MDW2IbjEXaVrJHCqbIqfri3z6Ny8UisD3FAmb5YnWGscZub/Ese6abPORRzpLuzGxgBUTtPvPy5qfvqxOFaUh2Q+kiZxYobhFCH88yF82J0ddpPiM1i7AgMBAAECggEBAJWcjBX2fgvV84OWRJfbPPNOD4b14GeSLZXSh7sibOFndc7VqOcCIX+1r4v0d+l3VUWCzQEu9dvVIiV7RUIOoinQ5TJz2QxjIWEFDrRYVeR2udQT62vszdKSruN9Dzrec5/1Y/yMvs5HpHr7Kbkeams0D8GqwaK1WDxKU7E5Gddi3mihXiD0X8p7MupAmP2T7xcwm75Jw7OGkfUIIzNDvvZ00aZALuCc5LvsCZHE8UTdIjMbvon5vs9hVzuAQMsyg1LAPxwusIOajlxiBl6WUZOXTwIrHZzzyEdbvg6KNfePSht7zhNIxPPCd5ud7VGZXhQmOaRE7SIOmFU+a4M+Q4ECgYEA5hJQddDAfpUH4VRfw9klHKxdkFQQWufDkCaijZKC/yfR5Z4Ukr8OhTP4VdJo1XzzXLx5RCRjQB8Zk7t7Z4SY/UmxU+VqsPtva2Uw9CHmIUpfS2VB078f087h4gfbgOZHTmdn7r1XSkTi/6cqgWeXfIdU0PT9N51JlEN+fmhLqGECgYEA3IWXcZdY4S2VJmkh5vG0PXO11rn3/w8hsNd/9Kfv4K5kUK1fUDnFDeQGJqAEazkEjzLAZrohi3Ip6aoSOIDx+HR9vvnhzG+rRJ+6Js/nUnzzkzyNrq+1GO5unsyRb9uaSBYvJCHgHY9Xq3B5jcF4v3VTU8ATDHmNI4LOl2MmJpsCgYAurvSok00b4j2RGT+9S6heIxNxH72Z1IE4FL7THzF5eKj8gJEIHcBiguMW9vTSrOHspUmt6/w/nI/iDB7EKIGqk3Np5Jk7hCldj1DZmK9Lff3MHKW4w4U/wzDOXm3Jv/AkFpNePAkkRsoQuejEDTMNz6AELlHbIQ03CmL2X09KwQKBgQCB3b6hK5MxEQoME8/eVKtjoTgOG3jb4Upi/ZYiO6A9vhXfmSpPcaYFlyq0JnpTtsFjn2zFUooct//M1tZiJjXZrqi7BieeoIjJIhObdcZxwpojNH7vyBQreYb1x91CdZ43I7FhYv28CsWDdfpvq+dzQSHwaWYOa6rdpdQKPV6jTwKBgFaDOtJtAfWjaPOICUGhpg3pFTxCmVFWsKK2YuYYDxxkqj2L96v9sVTXmymMFWd9hTu+bhC1RxBl3hYkyKMTmWs2JZgroDFwpg4RNRnN3zQ2XstFSZy2zw95WsNTevch7UlBf3gjQFlMiTT3JY2OC+noiAVKozOJ7f6yFB+9IIAV&quot;;// 支付宝公钥,查看地址：https://openhome.alipay.com/platform/keyManage.htm 对应APPID下的支付宝公钥。public static String alipay_public_key = &quot;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtqr5LqYeUWPHhvH3fKcblxc1TacHCuB5IMsyvG+BDBSd969zq41juHHMENZ2UM1tGdrx1wdJmdKNTUAGCDKR1W3LlTJs1ZeBGew4e8KHT4v2AZPRzw5W6ua/lIG7nGmkUoTE04of1ZScNsBBIvbcfC07HWagLawIZyW5FrvRAAHE6OfefogLLKhv2a3hdQFyabxwRMiyaUW6LNK7xXPU/P1JzKnuN0Rcu5jB0jWLZXFuknZp/miUddsXVYs3rGF5tASN3h7JskCuijs/qj1tyF/1HnbpILQA2g+aRjg2zjgo50Bzqiy1qIrVu5h/msEiyfx/Wm3oQillfMbwOQ9lEwIDAQAB&quot;;// 服务器异步通知页面路径  需http://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问public static String notify_url = &quot;http://xxx/应用名/notify_url&quot;;// 页面跳转同步通知页面路径 需http://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问public static String return_url = &quot;http://xxx/应用名/return_url&quot;;// 服务器异步通知页面路径  需http://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问//public static String notify_url = &quot;http://xxx/应用名/pay/notify_url&quot;;//PC支付时// 页面跳转同步通知页面路径 需http://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问//public static String return_url = &quot;http://xxx/应用名/pay/return_url&quot;;//PC支付时//授权回调地址public static String auth_return_url = &quot;http://xxx/应用名/auth_return_url&quot;;// 签名方式public static String sign_type = &quot;RSA2&quot;;// 字符编码格式public static String charset = &quot;utf-8&quot;;// 支付宝网关public static String gatewayUrl = &quot;https://openapi.alipaydev.com/gateway.do&quot;;// 支付宝日志路径public static String log_path = &quot;d:\\log&quot;;</code></pre><p>//↑↑↑↑↑↑↑↑↑↑请在这里配置您的基本信息↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</p><pre><code>/**  * 写日志，方便测试（看网站需求，也可以改成把记录存入数据库） * @param sWord 要写入日志里的文本内容 */public static void logResult(String sWord) {    FileWriter writer = null;    try {        writer = new FileWriter(log_path + &quot;alipay_log_&quot; + System.currentTimeMillis()+&quot;.txt&quot;);        writer.write(sWord);    } catch (Exception e) {        e.printStackTrace();    } finally {        if (writer != null) {            try {                writer.close();            } catch (IOException e) {                e.printStackTrace();            }        }    }}</code></pre><p>}<br>配置类已加上详细注解,不做过多解释,接下来是controller,集成了下单支付,异步同步回调,订单查询,账单下载,交易退款,退款查询各个接口的调用,拿过来直接用即可</p><p>package cn.mrdear.pay.controller;</p><p>import java.io.File;<br>import java.io.FileOutputStream;<br>import java.io.IOException;<br>import java.io.InputStream;<br>import java.io.UnsupportedEncodingException;<br>import java.net.HttpURLConnection;<br>import java.net.MalformedURLException;<br>import java.net.URL;<br>import java.util.Date;<br>import java.util.HashMap;<br>import java.util.Iterator;<br>import java.util.Map;</p><p>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;</p><p>import org.slf4j.Logger;<br>import org.slf4j.LoggerFactory;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Controller;<br>import org.springframework.ui.Model;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RequestParam;<br>import org.springframework.web.bind.annotation.ResponseBody;</p><p>import cn.mrdear.pay.alipay.AliPayConfig;<br>import cn.mrdear.pay.model.Orders;<br>import cn.mrdear.pay.service.OrderService;</p><p>import com.alipay.api.AlipayApiException;<br>import com.alipay.api.AlipayClient;<br>import com.alipay.api.DefaultAlipayClient;<br>import com.alipay.api.internal.util.AlipaySignature;<br>import com.alipay.api.request.AlipayDataDataserviceBillDownloadurlQueryRequest;<br>import com.alipay.api.request.AlipayTradeCloseRequest;<br>import com.alipay.api.request.AlipayTradeFastpayRefundQueryRequest;<br>import com.alipay.api.request.AlipayTradePagePayRequest;<br>import com.alipay.api.request.AlipayTradeQueryRequest;<br>import com.alipay.api.request.AlipayTradeRefundRequest;<br>import com.alipay.api.response.AlipayDataDataserviceBillDownloadurlQueryResponse;<br>import com.alipay.api.response.AlipayTradeCloseResponse;<br>import com.alipay.api.response.AlipayTradeFastpayRefundQueryResponse;<br>import com.alipay.api.response.AlipayTradeQueryResponse;<br>import com.alipay.api.response.AlipayTradeRefundResponse;<br>import com.example.util.IMoocJSONResult;<br>@Controller<br>@RequestMapping(“pay”)<br>public class PcPayController {<br>    private static final Logger logger = LoggerFactory.getLogger(PcPayController.class);<br>    @Autowired<br>    private OrderService orderService;<br>    /**</p><pre><code> * 即时到账下单接口 * @param request * @param response * @throws AlipayApiException  * @throws IOException  */@RequestMapping(&quot;payOrder&quot;)public void payOrder(HttpServletRequest req, Model mod, HttpServletResponse rep,        @RequestParam(value = &quot;goodId&quot;, required = true)String goodId) throws AlipayApiException, IOException{    logger.debug(&quot;进入获取订单信息接口方法&quot;);    //系统下单    Orders  param = new Orders();    param.setGoodId(goodId);    orderService.alipayOrder(param);   //生成订单信息，根据自己项目改动    //获得初始化的AlipayClient    AlipayClient alipayClient = new DefaultAlipayClient(AliPayConfig.gatewayUrl, AliPayConfig.app_id, AliPayConfig.merchant_private_key, &quot;json&quot;, AliPayConfig.charset, AliPayConfig.alipay_public_key, AliPayConfig.sign_type);    //设置请求参数    AlipayTradePagePayRequest alipayRequest = new AlipayTradePagePayRequest();    alipayRequest.setReturnUrl(AliPayConfig.return_url);    alipayRequest.setNotifyUrl(AliPayConfig.notify_url);    //商户订单号，商户网站订单系统中唯一订单号，必填    String out_trade_no = param.getTradeCode();    //付款金额，必填    String total_amount = param.getMoney().toString();    //订单名称，必填    String subject = param.getSubject();    //商品描述，可空    String body = param.getRemark();    alipayRequest.setBizContent(&quot;{\&quot;out_trade_no\&quot;:\&quot;&quot;+ out_trade_no +&quot;\&quot;,&quot;             + &quot;\&quot;total_amount\&quot;:\&quot;&quot;+ total_amount +&quot;\&quot;,&quot;             + &quot;\&quot;subject\&quot;:\&quot;&quot;+ subject +&quot;\&quot;,&quot;             + &quot;\&quot;body\&quot;:\&quot;&quot;+ body +&quot;\&quot;,&quot;             + &quot;\&quot;product_code\&quot;:\&quot;FAST_INSTANT_TRADE_PAY\&quot;}&quot;);    //请求    String result = alipayClient.pageExecute(alipayRequest).getBody();    rep.setContentType(&quot;text/html;charset=&quot; + AliPayConfig.charset);    rep.getWriter().write(result);//直接将完整的表单html输出到页面    rep.getWriter().flush();    rep.getWriter().close();}/** * 同步回调路径return_url * @param request * @param response * @throws AlipayApiException  * @throws UnsupportedEncodingException  */@RequestMapping(&quot;return_url&quot;)public String returnUrl(HttpServletRequest request, HttpServletResponse response) throws AlipayApiException, UnsupportedEncodingException{    logger.info(&quot;进入同步回调路径return_url&quot;);    //获取支付宝POST过来反馈信息    Map&lt;String,String&gt; params = new HashMap&lt;String,String&gt;();    Map requestParams = request.getParameterMap();    for (Iterator iter = requestParams.keySet().iterator(); iter.hasNext();) {        String name = (String) iter.next();        String[] values = (String[]) requestParams.get(name);        String valueStr = &quot;&quot;;        for (int i = 0; i &lt; values.length; i++) {            valueStr = (i == values.length - 1) ? valueStr + values[i]                    : valueStr + values[i] + &quot;,&quot;;        }        //乱码解决，这段代码在出现乱码时使用。        //valueStr = new String(valueStr.getBytes(&quot;ISO-8859-1&quot;), &quot;utf-8&quot;);        params.put(name, valueStr);    }    //切记alipaypublickey是支付宝的公钥，请去open.alipay.com对应应用下查看。    //boolean AlipaySignature.rsaCheckV1(Map&lt;String, String&gt; params, String publicKey, String charset, String sign_type)    boolean signVerified = AlipaySignature.rsaCheckV1(params, AliPayConfig.alipay_public_key, AliPayConfig.charset,AliPayConfig.sign_type);    if(signVerified) {        //商户订单号        String out_trade_no = new String(request.getParameter(&quot;out_trade_no&quot;).getBytes(&quot;ISO-8859-1&quot;),&quot;UTF-8&quot;);        //支付宝交易号        String trade_no = new String(request.getParameter(&quot;trade_no&quot;).getBytes(&quot;ISO-8859-1&quot;),&quot;UTF-8&quot;);        //付款金额        String total_amount = new String(request.getParameter(&quot;total_amount&quot;).getBytes(&quot;ISO-8859-1&quot;),&quot;UTF-8&quot;);        request.setAttribute(&quot;out_trade_no&quot;, out_trade_no);        request.setAttribute(&quot;trade_no&quot;, trade_no);        request.setAttribute(&quot;total_amount&quot;, total_amount);        logger.info(&quot;订单处理：系统订单号&quot; + out_trade_no + &quot;支付宝交易号：&quot; + trade_no);        //系统处理根据支付宝回调更改订单状态或者其他关联表的数据        Orders order = orderService.findOneByTradeCode(out_trade_no);        if(order == null){            signVerified = false;            request.setAttribute(&quot;signVerified&quot;, signVerified);             request.setAttribute(&quot;reason&quot;, &quot;商户订单号不存在&quot;);            logger.error(&quot;系统订单：&quot;+ out_trade_no + &quot;不存在。&quot;);        }else{            if(!order.getMoney().toString().equals(total_amount)){                signVerified = false;                request.setAttribute(&quot;signVerified&quot;, signVerified);                 request.setAttribute(&quot;reason&quot;, &quot;付款金额不对&quot;);                return &quot;notify_url&quot;;            }            if(order.getTradeStatus() == 1){//判断当前订单是否已处理，避免重复处理                logger.info(&quot;系统订单：&quot;+ out_trade_no + &quot;无需重复处理。&quot;);            }else{                order.setTradeStatus(1);//修改订单状态为已支付                Date payedAt = new Date();                order.setTransactionId(trade_no);                order.setPayedAt(payedAt);                orderService.payOrder(order);                logger.info(&quot;系统订单：&quot;+ out_trade_no + &quot;成功支付。&quot;);            }        }    }else{        request.setAttribute(&quot;reason&quot;, &quot;验签失败&quot;);    }    request.setAttribute(&quot;signVerified&quot;, signVerified);    return &quot;return_url&quot;;}/** * 异步回调路径notify_url * @param request * @param response * @throws AlipayApiException  * @throws UnsupportedEncodingException  */@RequestMapping(&quot;notify_url&quot;)public void notifyUrl(HttpServletRequest request, HttpServletResponse response) throws AlipayApiException, UnsupportedEncodingException{    logger.info(&quot;进入异步回调路径notify_url&quot;);    //获取支付宝POST过来反馈信息    Map&lt;String,String&gt; params = new HashMap&lt;String,String&gt;();    Map requestParams = request.getParameterMap();    for (Iterator iter = requestParams.keySet().iterator(); iter.hasNext();) {        String name = (String) iter.next();        String[] values = (String[]) requestParams.get(name);        String valueStr = &quot;&quot;;        for (int i = 0; i &lt; values.length; i++) {            valueStr = (i == values.length - 1) ? valueStr + values[i]                    : valueStr + values[i] + &quot;,&quot;;        }        //乱码解决，这段代码在出现乱码时使用。        //valueStr = new String(valueStr.getBytes(&quot;ISO-8859-1&quot;), &quot;utf-8&quot;);        params.put(name, valueStr);    }    //切记alipaypublickey是支付宝的公钥，请去open.alipay.com对应应用下查看。    //boolean AlipaySignature.rsaCheckV1(Map&lt;String, String&gt; params, String publicKey, String charset, String sign_type)    boolean signVerified = AlipaySignature.rsaCheckV1(params, AliPayConfig.alipay_public_key, AliPayConfig.charset,AliPayConfig.sign_type);    if(signVerified) {        //商户订单号        String out_trade_no = new String(request.getParameter(&quot;out_trade_no&quot;).getBytes(&quot;ISO-8859-1&quot;),&quot;UTF-8&quot;);        //支付宝交易号        String trade_no = new String(request.getParameter(&quot;trade_no&quot;).getBytes(&quot;ISO-8859-1&quot;),&quot;UTF-8&quot;);        //付款金额        String total_amount = new String(request.getParameter(&quot;total_amount&quot;).getBytes(&quot;ISO-8859-1&quot;),&quot;UTF-8&quot;);        request.setAttribute(&quot;out_trade_no&quot;, out_trade_no);        request.setAttribute(&quot;trade_no&quot;, trade_no);        request.setAttribute(&quot;total_amount&quot;, total_amount);        logger.info(&quot;订单处理：系统订单号&quot; + out_trade_no + &quot;支付宝交易号：&quot; + trade_no);        //系统处理根据支付宝回调更改订单状态或者其他关联表的数据        Orders order = orderService.findOneByTradeCode(out_trade_no);        if(order == null){            signVerified = false;            request.setAttribute(&quot;signVerified&quot;, signVerified);             request.setAttribute(&quot;reason&quot;, &quot;商户订单号不存在&quot;);            logger.error(&quot;系统订单：&quot;+ out_trade_no + &quot;不存在。&quot;);        }else{            if(!order.getMoney().toString().equals(total_amount)){                signVerified = false;                request.setAttribute(&quot;signVerified&quot;, signVerified);                 request.setAttribute(&quot;reason&quot;, &quot;付款金额不对&quot;);            }            if(order.getTradeStatus() == 1){//判断当前订单是否已处理，避免重复处理                logger.info(&quot;系统订单：&quot;+ out_trade_no + &quot;无需重复处理。&quot;);            }else{                order.setTradeStatus(1);//修改订单状态为已支付                Date payedAt = new Date();                order.setTransactionId(trade_no);                order.setPayedAt(payedAt);                orderService.payOrder(order);                logger.info(&quot;系统订单：&quot;+ out_trade_no + &quot;成功支付。&quot;);            }        }    }else{        request.setAttribute(&quot;reason&quot;, &quot;验签失败&quot;);    }    response.setContentType(&quot;text/html;charset=&quot; + AliPayConfig.charset);    try {        response.getWriter().write(&quot;success&quot;);//直接将完整的表单html输出到页面        response.getWriter().flush();        response.getWriter().close();    } catch (IOException e) {        e.printStackTrace();    }}/** * 支付宝交易查询接口 * @param request * @param response * @throws UnsupportedEncodingException  * @throws AlipayApiException  */@RequestMapping(&quot;queryOrder&quot;)@ResponseBodypublic CommonResponse queryOrder(HttpServletRequest req, Model mod, HttpServletResponse rep,        @RequestParam(value = &quot;tradeCode&quot;, required = true)String tradeCode,        @RequestParam(value = &quot;tradeNo&quot;, required = true)String tradeNo) throws UnsupportedEncodingException, AlipayApiException{    CommonResponse cr = new CommonResponse();    AlipayClient alipayClient = new DefaultAlipayClient(AliPayConfig.gatewayUrl, AliPayConfig.app_id, AliPayConfig.merchant_private_key, &quot;json&quot;, AliPayConfig.charset, AliPayConfig.alipay_public_key, AliPayConfig.sign_type); //获得初始化的AlipayClient    AlipayTradeQueryRequest request = new AlipayTradeQueryRequest();//创建API对应的request类    request.setBizContent(&quot;{&quot; +            &quot;   \&quot;out_trade_no\&quot;:\&quot;&quot;+tradeCode+&quot;\&quot;,&quot; +            &quot;   \&quot;trade_no\&quot;:\&quot;&quot;+tradeNo+&quot;\&quot;&quot; +            &quot;  }&quot;);//设置业务参数    //根据response中的结果继续业务逻辑处理    String orderString = null;      try {        //调用查询方法        AlipayTradeQueryResponse response = alipayClient.execute(request);//通过alipayClient调用API，获得对应的response类        if(response.isSuccess()){            System.out.println(&quot;调用成功&quot;);        } else {            System.out.println(&quot;调用失败&quot;);        }        orderString = response.getBody();//就是orderString 可以直接给客户端请求，无需再做处理。    } catch (AlipayApiException e) {        e.printStackTrace();    }    cr.setData(orderString);    //返回orderString    IMoocJSONResult.ok(cr);    return cr;}/** * 支付宝交易退款接口 */@RequestMapping(&quot;refundOrder&quot;)@ResponseBodypublic void refundOrder(HttpServletRequest req,HttpServletResponse rep,        @RequestParam(value = &quot;tradeCode&quot;)String tradeCode,        @RequestParam(value = &quot;tradeNo&quot;)String tradeNo,        @RequestParam(value = &quot;refundAmount&quot;, required = true)String refundAmount,        @RequestParam(value = &quot;refundReason&quot;)String refundReason,        @RequestParam(value = &quot;outrequestNo&quot;, required = true)String outrequestNo) throws UnsupportedEncodingException, AlipayApiException{    //获得初始化的AlipayClient    AlipayClient alipayClient = new DefaultAlipayClient(AliPayConfig.gatewayUrl, AliPayConfig.app_id, AliPayConfig.merchant_private_key, &quot;json&quot;, AliPayConfig.charset, AliPayConfig.alipay_public_key, AliPayConfig.sign_type);    //设置请求参数    AlipayTradeRefundRequest alipayRequest = new AlipayTradeRefundRequest();    alipayRequest.setBizContent(&quot;{\&quot;out_trade_no\&quot;:\&quot;&quot;+ tradeCode +&quot;\&quot;,&quot;             + &quot;\&quot;trade_no\&quot;:\&quot;&quot;+ tradeNo +&quot;\&quot;,&quot;             + &quot;\&quot;refund_amount\&quot;:\&quot;&quot;+ refundAmount +&quot;\&quot;,&quot;             + &quot;\&quot;refund_reason\&quot;:\&quot;&quot;+ refundReason +&quot;\&quot;,&quot;             + &quot;\&quot;out_request_no\&quot;:\&quot;&quot;+ outrequestNo +&quot;\&quot;}&quot;);    //请求    AlipayTradeRefundResponse response = alipayClient.execute(alipayRequest);    if(response.isSuccess()){        System.out.println(&quot;调用成功&quot;);    } else {        System.out.println(&quot;调用失败&quot;);    }    String result = alipayClient.execute(alipayRequest).getBody();    //输出    try {        rep.getWriter().write(result);//直接将完整的表单html输出到页面        rep.getWriter().flush();        rep.getWriter().close();    } catch (IOException e) {        e.printStackTrace();    }}/** * 支付宝交易退款查询接口 */@RequestMapping(&quot;queryrefundOrder&quot;)@ResponseBodypublic void queryrefundOrder(HttpServletRequest req,HttpServletResponse rep,        @RequestParam(value = &quot;tradeCode&quot;)String tradeCode,        @RequestParam(value = &quot;tradeNo&quot;)String tradeNo,        @RequestParam(value = &quot;outrequestNo&quot;, required = true)String outrequestNo) throws AlipayApiException, IOException{    //获得初始化的AlipayClient    AlipayClient alipayClient = new DefaultAlipayClient(AliPayConfig.gatewayUrl, AliPayConfig.app_id, AliPayConfig.merchant_private_key, &quot;json&quot;, AliPayConfig.charset, AliPayConfig.alipay_public_key, AliPayConfig.sign_type);    //设置请求参数    AlipayTradeFastpayRefundQueryRequest alipayRequest = new AlipayTradeFastpayRefundQueryRequest();    alipayRequest.setBizContent(&quot;{\&quot;out_trade_no\&quot;:\&quot;&quot;+ tradeCode +&quot;\&quot;,&quot;             +&quot;\&quot;trade_no\&quot;:\&quot;&quot;+ tradeNo +&quot;\&quot;,&quot;            +&quot;\&quot;out_request_no\&quot;:\&quot;&quot;+ outrequestNo +&quot;\&quot;}&quot;);    //请求    AlipayTradeFastpayRefundQueryResponse response = alipayClient.execute(alipayRequest);    if(response.isSuccess()){        System.out.println(&quot;调用成功&quot;);    } else {        System.out.println(&quot;调用失败&quot;);    }    String result = alipayClient.execute(alipayRequest).getBody();    rep.getWriter().write(result);//直接将完整的表单html输出到页面    rep.getWriter().flush();    rep.getWriter().close();}/** * 即时到账交易关闭接口 */@RequestMapping(&quot;tradeClose&quot;)@ResponseBodypublic void tradeClose(HttpServletRequest req,HttpServletResponse rep,        @RequestParam(value = &quot;tradeCode&quot;)String tradeCode,        @RequestParam(value = &quot;tradeNo&quot;)String tradeNo) throws AlipayApiException, IOException{    //获得初始化的AlipayClient    AlipayClient alipayClient = new DefaultAlipayClient(AliPayConfig.gatewayUrl, AliPayConfig.app_id, AliPayConfig.merchant_private_key, &quot;json&quot;, AliPayConfig.charset, AliPayConfig.alipay_public_key, AliPayConfig.sign_type);    //设置请求参数    AlipayTradeCloseRequest alipayRequest = new AlipayTradeCloseRequest();    alipayRequest.setBizContent(&quot;{\&quot;out_trade_no\&quot;:\&quot;&quot;+ tradeCode +&quot;\&quot;,&quot; +&quot;\&quot;trade_no\&quot;:\&quot;&quot;+ tradeNo +&quot;\&quot;}&quot;);    //请求    AlipayTradeCloseResponse response = alipayClient.execute(alipayRequest);    if(response.isSuccess()){        System.out.println(&quot;调用成功&quot;);    } else {        System.out.println(&quot;调用失败&quot;);    }    String result = alipayClient.execute(alipayRequest).getBody();    rep.getWriter().write(result);//直接将完整的表单html输出到页面    rep.getWriter().flush();    rep.getWriter().close();}/** *  查询对账单下载地址接口 */@RequestMapping(&quot;tradedownloadurl&quot;)@ResponseBodypublic void tradedownloadurl(HttpServletRequest req,HttpServletResponse rep,        @RequestParam(value = &quot;billtype&quot;)String billType,        @RequestParam(value = &quot;billdate&quot;)String billDate) throws AlipayApiException, IOException{    //获得初始化的AlipayClient    AlipayClient alipayClient = new DefaultAlipayClient(AliPayConfig.gatewayUrl, AliPayConfig.app_id, AliPayConfig.merchant_private_key, &quot;json&quot;, AliPayConfig.charset, AliPayConfig.alipay_public_key, AliPayConfig.sign_type);    AlipayDataDataserviceBillDownloadurlQueryRequest alipayRequest = new AlipayDataDataserviceBillDownloadurlQueryRequest();//创建API对应的request类    alipayRequest.setBizContent(&quot;{&quot; +            &quot;    \&quot;bill_type\&quot;:\&quot;trade\&quot;,&quot; +            &quot;   \&quot;bill_date\&quot;:\&quot;&quot;+billDate+&quot;\&quot;&quot; +            &quot;  }&quot;);//设置业务参数    AlipayDataDataserviceBillDownloadurlQueryResponse response = alipayClient.execute(alipayRequest);    System.out.print(response.getBody());    String urlStr = response.getBillDownloadUrl();    downloadBillurl(urlStr);}/** * 下载账单 */public void downloadBillurl(String urlStr){    //指定希望保存的文件路径    String filePath = &quot;d:/logo/fund_bill_20160405.csv&quot;;    URL url = null;    HttpURLConnection httpUrlConnection = null;    InputStream fis = null;    FileOutputStream fos = null;    try {        url = new URL(urlStr);        httpUrlConnection = (HttpURLConnection) url.openConnection();        httpUrlConnection.setConnectTimeout(5 * 1000);        httpUrlConnection.setDoInput(true);        httpUrlConnection.setDoOutput(true);        httpUrlConnection.setUseCaches(false);        httpUrlConnection.setRequestMethod(&quot;GET&quot;);        httpUrlConnection.setRequestProperty(&quot;Charsert&quot;, &quot;UTF-8&quot;);        httpUrlConnection.connect();        fis = httpUrlConnection.getInputStream();        byte[] temp = new byte[1024];        int b;        fos = new FileOutputStream(new File(filePath));        while ((b = fis.read(temp)) != -1) {            fos.write(temp, 0, b);            fos.flush();        }    } catch (MalformedURLException e) {        e.printStackTrace();    } catch (IOException e) {        e.printStackTrace();    } finally {        try {            if(fis!=null) fis.close();            if(fos!=null) fos.close();            if(httpUrlConnection!=null) httpUrlConnection.disconnect();        } catch (IOException e) {            e.printStackTrace();        }    }}</code></pre><p>}<br>到此,集成支付宝的电脑网站支付功能就集成完毕了。总结一下：<br>其实集成支付宝的支付很简单,基本上只要熟悉开发文档,一步步来,再加上我给出的这两段代码,基本上就可以轻松集成。<br>下节准备研究一下集成微信支付,微信支付貌似需要商户才能集成,个人不能够集成,这需要研究一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天一直在研究java集成支付宝支付,今天就把研究成果分享一下,也便于以后遇到需要集成支付宝支付的时候,可以很快就集成出来。&lt;/p&gt;
&lt;h2 id=&quot;1-准备一个支付宝账号-登录蚂蚁金服开放平台-按照下图步骤-创建好应用-添加相应需要开发集成的支付功能-搭建好开发环境。&quot;
      
    
    </summary>
    
      <category term="技术分享" scheme="https://zqhf.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="技术分享" scheme="https://zqhf.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>看武侠电视剧《马鸣风萧萧》的一些感触</title>
    <link href="https://zqhf.github.io/2018/05/06/article8/"/>
    <id>https://zqhf.github.io/2018/05/06/article8/</id>
    <published>2018-05-06T09:59:11.000Z</published>
    <updated>2018-05-06T11:20:46.379Z</updated>
    
    <content type="html"><![CDATA[<p>喜剧与悲剧,就个人而言,并不是说情节搞笑的,笑料多多的就叫喜剧,而情节抑郁,悲<br>伤的就叫悲剧,而是对于一部电视剧或电影来说,结局是快乐的,幸福的就叫喜剧,相<br>反,结局是凄惨的,虐心的就叫悲剧。《马鸣风萧萧》是萧逸老先生的一部得力武侠<br>创作,该剧讲述一个生长在草原上的野小子寇英杰和一匹神马为报师门之仇闯荡江<br>湖间与两个女孩产生感情纠葛,之后在高手的指点下习得奇世武功为武林除害的故<br>事。可以说小说与其他的武侠小说都比较类似,讲述儿女情长,恩怨情仇,侠骨柔<br>情。其实对于这部小说我并没有看过,应该来说我虽然喜欢武侠,可是却从来没有<br>看过一部武侠小说,可能仅仅是喜欢武侠电视剧或者电影吧,不过我也不会去看小<br>说,一是因为长篇内容看完很花费时间,而是因为可能电视剧更加形象点,也不用<br>自己去脑补每一个画面。而且小说看了,可能很快就忘了,而电视剧看了会更加深<br>刻一点。看完了这部电视剧,结局其实本人不太满意,一是到了结局突然剧情就加<br>速了,二是结局中铁小微虽然深受重伤,但却与寇英杰在一起了,纵观整部情节,寇<br>英杰与铁小微的感情戏明显较少,几次见面都是因风雷堡号令而匆匆离去,相反,<br>与郭彩绫的感情戏就单说日月峡谷那段时间就足够了。可是结局出人意料,于是<br>百度了小说结局,还真是与内心所想一致—寇英杰与郭彩绫在一起了,些许欣慰。<br>于是就电视剧与小说原版结局不一致,我开始明白,其实我们不管看小说或者电视<br>剧都带有自己的一些感情色彩。都希望情节发展能够按照预想的,所希望的结局<br>收尾,而绝大部分人所希望的结局都是喜剧色彩的,人生不也是一样吗?但是总有<br>事与愿违的事情发生,于是就有各类不同结局的小说或者电视剧诞生,这是一件好<br>事,只有矛盾才能驱动社会进步与发展,从不同的角度去看问题,答案是不一样的,<br>而每个答案又可以说都是对的,或者都是错的,这并没有一个绝对合理的解释,世<br>间万事都是相对的,都维持在一个平衡的状态,这种平衡一旦打破,那么结果往往<br>总是灾难性的。所以我们生活在这个世界上,如果能够以相对的这种观念去看待<br>问题,处理事情,也许结果会好很多,也许就能避免一意孤行,独断专行了,慢慢地<br>也许就能明白了相对二字的深刻含义了。当然这都是也许,也是一种期望。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;喜剧与悲剧,就个人而言,并不是说情节搞笑的,笑料多多的就叫喜剧,而情节抑郁,悲&lt;br&gt;伤的就叫悲剧,而是对于一部电视剧或电影来说,结局是快乐的,幸福的就叫喜剧,相&lt;br&gt;反,结局是凄惨的,虐心的就叫悲剧。《马鸣风萧萧》是萧逸老先生的一部得力武侠&lt;br&gt;创作,该剧讲述一个生长
      
    
    </summary>
    
      <category term="随笔" scheme="https://zqhf.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://zqhf.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>使用IntelliJ IDEA搭建基于maven管理的SSM(Spring,SpringMVC,Mybatis)整合shiro框架小结</title>
    <link href="https://zqhf.github.io/2018/05/03/article7/"/>
    <id>https://zqhf.github.io/2018/05/03/article7/</id>
    <published>2018-05-03T10:31:49.000Z</published>
    <updated>2018-05-04T08:19:26.751Z</updated>
    
    <content type="html"><![CDATA[<p>今天再次尝试使用IntelliJ IDEA搭建基于maven管理的SSM(Spring,SpringMVC,Mybatis)整合shiro框架时,踩了一些坑。特在此总结,以后避免。<br>1.总是提示shiroFilter这个bean找不到,报错如下：<br><img src="/2018/05/03/article7/1.PNG"><br>自然而然的想到很明显这是配置文件没有载入,导致bean找不到,于是在web.xml文件中载入配置文件，如下图:<br><img src="/2018/05/03/article7/2.PNG"><br>但是。。。加入了以后又报错了，报错如下:<br><img src="/2018/05/03/article7/3.PNG"><br><img src="/2018/05/03/article7/4.PNG"><br>奇怪了,我不是在web.xml文件里面加入配置了吗?为什么还会如此呢?于是百度了很久,才发现,需要在POM.XML文件里面添加如下配置<br><img src="/2018/05/03/article7/5.PNG"><br>为什么会如此呢?原来只有在POM.XML文件里面见资源添加进去,才能在运行或者编译时,将对应的配置文件加载进target目录下,结合上一篇文章遇到的问题,从此在开发maven项目时,此配置可为固定配置,防止再次发生类似的问题。<br>2.在运行时总是报如下错:<br><img src="/2018/05/03/article7/6.PNG"><br>原因:项目所用的JDK版本与tomcat的版本不对应,如果项目用到的tomcat版本是tomcat8,那么对应的JDK版本就要高一点,一般为JDK1.7-JDK1.8。如果项目用到的tomcat版本是tomcat6,那么对应的JDK版本就要一般为JDK1.6-JDK1.7,<br>如果此时用JDK1.8,那么可能会出现编译运行不报错,而访问就会出现上图错误的问题,此外,最重要的是,tomcat版本也要与项目工具(IDEA或者myeclipse等其他工具)所用的编译版本对应,否则也会报错。具体配置如下；<br><img src="/2018/05/03/article7/7.PNG"><br>图中1-2配置一定要对应,否则项目起不来。<br>在此附上最近两天重新整合ssm+shiro框架和整合阿里dubbo+ssm框架的pom文件,可直接拿过来用,通过对比更加熟悉maven的配置。</p><h2 id="1-ssm-shiro框架"><a href="#1-ssm-shiro框架" class="headerlink" title="1.ssm+shiro框架"></a>1.ssm+shiro框架</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;com&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;auth-control&lt;/artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;name&gt;auth-control Maven Webapp&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;spring.version&gt;4.3.8.RELEASE&lt;/spring.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.9&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-logging&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.3&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- shiro --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-quartz&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- mybatis --&gt;</span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;3.1.1&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;1.1.1&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.25&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.2.23&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- spring --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;aspectjrt&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.7.4&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.7.4&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- jstl jar --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet.jsp.jstl&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jstl-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.glassfish.web&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jstl-impl&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;javax.servlet.jsp.jstl&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;jstl-api&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;auth-control&lt;/finalName&gt;</span><br><span class="line">      &lt;resources&gt;</span><br><span class="line">          &lt;!--&lt;resource&gt;</span><br><span class="line">              &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">              &lt;includes&gt;</span><br><span class="line">                  &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">                  &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">              &lt;/includes&gt;</span><br><span class="line">          &lt;/resource&gt;--&gt;</span><br><span class="line">          &lt;resource&gt;</span><br><span class="line">              &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">              &lt;includes&gt;</span><br><span class="line">                  &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">                  &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">              &lt;/includes&gt;</span><br><span class="line">          &lt;/resource&gt;</span><br><span class="line">      &lt;/resources&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">             &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">             &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">             &lt;version&gt;3.5&lt;/version&gt;</span><br><span class="line">             &lt;configuration&gt;</span><br><span class="line">                 &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">                 &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">             &lt;/configuration&gt;</span><br><span class="line">       &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="2-dubbo-ssm框架"><a href="#2-dubbo-ssm框架" class="headerlink" title="2.dubbo+ssm框架"></a>2.dubbo+ssm框架</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;provider03&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;provider03&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">  &lt;name&gt;provider03 Maven Webapp&lt;/name&gt;  </span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;  </span><br><span class="line">    &lt;properties&gt;  </span><br><span class="line">        &lt;spring.version&gt;4.3.8.RELEASE&lt;/spring.version&gt;  </span><br><span class="line">    &lt;/properties&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;dependencies&gt;  </span><br><span class="line">    &lt;!-- Spring-Mybatis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- MySQL --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.23&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- alibaba的druid数据库连接池 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- alibaba fastjson 格式化对 --&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;1.1.41&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt; </span><br><span class="line">        &lt;!-- 整合shiro框架start --&gt; </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;1.2.2&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;  </span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;1.2.2&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;  </span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;1.2.2&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;  </span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;1.2.2&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;  </span><br><span class="line">&lt;!-- 整合shiro框架end --&gt; </span><br><span class="line">&lt;!-- 分页插件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;3.8.1&lt;/version&gt;  </span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;com.dubbo.test&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;service&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;dubbo&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;2.5.3&lt;/version&gt;  </span><br><span class="line">            &lt;exclusions&gt;  </span><br><span class="line">                &lt;exclusion&gt;  </span><br><span class="line">                    &lt;artifactId&gt;spring&lt;/artifactId&gt;  </span><br><span class="line">                    &lt;groupId&gt;org.springframework&lt;/groupId&gt;  </span><br><span class="line">                &lt;/exclusion&gt;  </span><br><span class="line">            &lt;/exclusions&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">        &lt;!-- spring begin --&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;    </span><br><span class="line">        &lt;!-- spring end --&gt;  </span><br><span class="line">  </span><br><span class="line">        &lt;!-- web jar --&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;3.0.1&lt;/version&gt;  </span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;jstl&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;1.1.2&lt;/version&gt;  </span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;javax.servlet.jsp-api&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;2.3.1&lt;/version&gt;  </span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;!-- jstl jar --&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;jstl&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;jstl&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;1.2&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;taglibs&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;standard&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;1.1.2&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">        &lt;!-- jackson jar --&gt;  </span><br><span class="line">       &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;jackson-jaxrs&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;1.9.11&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">  </span><br><span class="line">        &lt;!-- commons jar --&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;3.3.2&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;commons-io&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;2.4&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;4.0&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;commons-logging&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;1.1.3&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;commons-codec&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;1.8&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;1.8.3&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;commons-chain&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;commons-chain&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;1.2&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;1.3.1&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;commons-math3&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;3.3&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;2.2&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;commons-digester3&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;3.2&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;commons-net&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;commons-net&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;3.3&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;commons-dbutils&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;commons-dbutils&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;1.5&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;commons-email&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;1.3.3&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;commons-dbcp&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;1.4&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">        &lt;!-- 日志相关 --&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;log4j&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;log4j&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;1.2.16&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;1.7.5&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt; </span><br><span class="line">         </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;3.4.11&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;   </span><br><span class="line">        &lt;!-- zookeeper client依赖，用于向zookeeper注册服务 --&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;zkclient&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;0.1&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt; </span><br><span class="line">        </span><br><span class="line">    &lt;/dependencies&gt; </span><br><span class="line">  &lt;build&gt;</span><br><span class="line">        &lt;finalName&gt;provider03&lt;/finalName&gt;  </span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">&lt;resource&gt;</span><br><span class="line">&lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">&lt;includes&gt;</span><br><span class="line">&lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">&lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">&lt;/includes&gt;</span><br><span class="line">&lt;/resource&gt;</span><br><span class="line">&lt;resource&gt;</span><br><span class="line">&lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">&lt;includes&gt;</span><br><span class="line">&lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">&lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">&lt;/includes&gt;</span><br><span class="line">&lt;/resource&gt;</span><br><span class="line">&lt;/resources&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天再次尝试使用IntelliJ IDEA搭建基于maven管理的SSM(Spring,SpringMVC,Mybatis)整合shiro框架时,踩了一些坑。特在此总结,以后避免。&lt;br&gt;1.总是提示shiroFilter这个bean找不到,报错如下：&lt;br&gt;&lt;img sr
      
    
    </summary>
    
      <category term="技术分享" scheme="https://zqhf.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="技术分享" scheme="https://zqhf.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>使用IntelliJ IDEA搭建基于maven管理的SSH(Struts2,Spring,Hibernate)框架小结</title>
    <link href="https://zqhf.github.io/2018/04/23/article6/"/>
    <id>https://zqhf.github.io/2018/04/23/article6/</id>
    <published>2018-04-23T05:59:57.000Z</published>
    <updated>2018-05-03T11:10:13.161Z</updated>
    
    <content type="html"><![CDATA[<p>今天再次尝试使用IntelliJ IDEA搭建基于maven管理的SSH(Struts2,Spring,Hibernate)框架时,一直遇到一个问题,困扰了许久,问题如下:<br>框架整合项目见:<a href="https://github.com/zqhf/SSHfram" target="_blank" rel="noopener">https://github.com/zqhf/SSHfram</a><br><img src="/2018/04/23/article6/1.PNG"><br>显示了路径映射有问题,去百度也看到了很多解决方案,大体有这么几条:<br>1、首先检查Action名称是否写错。<br>2、检查配置文件是否写错,struts有一个默认的配置文件,叫struts-default.xml,这个配置文件名字是不能错的,这个是规定。但是光这一个配置文件名字不错,可能还会有问题。<br>一般大一点的项目,配置文件有好多,可能会一个模块一个配置文件,但是一个项目中只有一个struts-default.xml,所以基本上都是把struts的配置写在各个模块的配置文件中,然后把在struts-default.xml中引用这些配置文件。<br>所以说,其他配置文件一定要在struts-default.xml中引用,而且名字不能出错。<br>3、配置文件中的包名不能重复,尤其是采用多个struts配置文件时,各个文件之间的package的name一定不能重复。<br>4、检查struts-default.xml配置文件所在路径,一般都在src能找到的路径下,而且要确认编译后是否在classes目录下,如下图:<br><img src="/2018/04/23/article6/3.PNG"><br>5、可以去掉namespace试试,namespace是action的目录,如果action指定目录的话,就在指定namespace下找,没有的话,就在默认的路径下找。<br>6、检查struts配置文件中有没有配置<welcome-file>,配置文件中需要配置自己项目的启动文件。<br>可是很奇怪的是,按以上几条都没有解决报错的问题,后来重新检查一下框架搭建的过程,发现tomcat的配置如果配置不正确,也可能出现这个报错,下图是我的tomcat配置:<br><img src="/2018/04/23/article6/2.PNG"><br>如果其中红色部分配置错了,也会导致这样的错误,归纳为第七种原因,解决办法就是配置正确。<br>但是,由于项目是基于maven管理的,当已经使用maven的打包命令(maven clean package)将项目部署到target目录下的classes目录下时,如果项目丝毫没有修改,再一次使用maven的命令,如：maven clean package或者maven clean install<br>命令,然后运行项目,会发现struts.xml配置文件没有进入classes目录,此时也会发现上述问题,这就奇怪了,执行两次maven的命令,原有的配置文件反而不见了。接着修改一下配置文件<br>中的内容,哪怕是增加一个空格,再运行命令mvn clean package,然后运行项目,结果配置文件又回来了。。。。这是什么原因呢？仔细观察,会发现,执行maven的打包命令,struts.xml这个文件并没有进入target的classes目录<br>而是在运行tomcat时,才会将配置文件加载到classes目录。因此在pom.xml文件中build需要如此配置,才能一块儿打包进入classes目录:<br><img src="/2018/04/23/article6/4.PNG"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注:该配置还能解决有时候配置文件找不到导致bean也找不到等问题</span><br></pre></td></tr></table></figure></welcome-file></p><p>下面是maven打包时候的一些细节。<br>看看maven的源码有这么一段:<br> protected boolean checkForced()throws ArchiverException<br>    {<br>        if ( !isForced() &amp;&amp; isSupportingForced() &amp;&amp; isUptodate() )<br>        {<br>            getLogger().debug( “Archive “ + getDestFile() + “ is uptodate.” );<br>            return false;<br>        }<br>        return true;<br>    }<br>这个方法是校验是否强制重新创建jar包,只有当</p><ol><li>没有将 jar.forceCreation 参数设为true</li><li>并且支持强制设置</li><li><p>up to date,意思就是被认为是最新的内容,没有改动<br>这个时候maven不进行新包的生成直接返回。<br>protected void execute()throws ArchiverException, IOException<br> {</p><pre><code>if ( ! checkForced() ){    return;}if ( doubleFilePass ){    skipWriting = true;    createArchiveMain();    skipWriting = false;    createArchiveMain();}else{    createArchiveMain();}finalizeZipOutputStream( zOut );</code></pre><p> }<br>所以除了那个强制的参数以外,就是看什么时候 isUptodate 为true,查看关键代码：<br>protected boolean isUptodate()throws ArchiverException<br> {</p><pre><code>final File zipFile = getDestFile();final long destTimestamp = zipFile.lastModified();if ( destTimestamp == 0 ){    getLogger().debug( &quot;isUp2date: false (Destination &quot; + zipFile.getPath() + &quot; not found.)&quot; );    return false; // File doesn&apos;t yet exist}final Iterator it = resources.iterator();if ( !it.hasNext() ){    getLogger().debug( &quot;isUp2date: false (No input files.)&quot; );    return false; // No timestamp to compare}while ( it.hasNext() ){    final Object o = it.next();    final long l;    if ( o instanceof ArchiveEntry )    {        l = ( (ArchiveEntry) o ).getResource()                                .getLastModified();    }    else if ( o instanceof PlexusIoResourceCollection )    {        try        {            l = ( (PlexusIoResourceCollection) o ).getLastModified();        }        catch ( final IOException e )        {            throw new ArchiverException( e.getMessage(), e );        }    }    else    {        throw new IllegalStateException( &quot;Invalid object type: &quot; + o.getClass()                                                                    .getName() );    }    if ( l == PlexusIoResource.UNKNOWN_MODIFICATION_DATE )    {        // Don&apos;t know what to do. Safe thing is to assume not up2date.        getLogger().debug( &quot;isUp2date: false (Resource with unknown modification date found.)&quot; );        return false;    }    if ( l &gt; destTimestamp )    {        getLogger().debug( &quot;isUp2date: false (Resource with newer modification date found.)&quot; );        return false;    }}getLogger().debug( &quot;isUp2date: true&quot; );return true;</code></pre><p> }<br> 代码中提到有这么几个情况,会认为jar包不是最新的：</p></li><li>jar包不存在（其实就是mvn clean的效果）</li><li>传入比较的文件资源不存在</li><li>Resource with unknown modification date found,资源的修改时间未知</li><li>Resource with newer modification date found,jar包的最后修改时间比资源的最后修改时间早</li></ol><p>总结</p><ol><li>理论上来讲不做mvn clean 得到的jar包应该是最新的,除非其他方式修改jar包中的内容而不修改源代码。</li><li>平时可以用mvn install,而不进行chean节省时间（如果你觉得节省时间多的话）,但最保险还是用 mvn clean install 生成最新的jar包或其他包</li><li>不想用mvn clean又想保证jar包最新,建议添加 -Djar.forceCreation 参数。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天再次尝试使用IntelliJ IDEA搭建基于maven管理的SSH(Struts2,Spring,Hibernate)框架时,一直遇到一个问题,困扰了许久,问题如下:&lt;br&gt;框架整合项目见:&lt;a href=&quot;https://github.com/zqhf/SSHfra
      
    
    </summary>
    
      <category term="技术分享" scheme="https://zqhf.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="技术分享" scheme="https://zqhf.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>关于书写存储过程的几个小步骤总结</title>
    <link href="https://zqhf.github.io/2018/04/17/article5/"/>
    <id>https://zqhf.github.io/2018/04/17/article5/</id>
    <published>2018-04-17T01:14:56.000Z</published>
    <updated>2018-04-17T02:33:41.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-存储过程简介"><a href="#1-存储过程简介" class="headerlink" title="1.存储过程简介"></a>1.存储过程简介</h2><p>我们常用的操作数据库语言SQL语句在执行的时候需要要先编译,然后执行,而存储过程（Stored Procedure）是一组为了完成特定功能的SQL语句集,<br>经编译后存储在数据库中,用户通过指定存储过程的名字并给定参数（如果该存储过程带有参数）来调用执行它。<br>一个存储过程是一个可编程的函数,它在数据库中创建并保存。它可以有SQL语句和一些特殊的控制结构组成。当希望在不同的应用程序或平台上执行<br>相同的函数,或者封装特定功能时,存储过程是非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟。它允许控制数据的访问方式。</p><p>存储过程通常有以下优点：</p><p>(1).存储过程增强了SQL语言的功能和灵活性。存储过程可以用流控制语句编写,有很强的灵活性,可以完成复杂的判断和较复杂的运算。</p><p>(2).存储过程允许标准组件是编程。存储过程被创建后,可以在程序中被多次调用,而不必重新编写该存储过程的SQL语句。而且数据库专业人员可以随时对存储过程进行修改,对应用程序源代码毫无影响。</p><p>(3).存储过程能实现较快的执行速度。如果某一操作包含大量的Transaction-SQL代码或分别被多次执行,那么存储过程要比批处理的执行速度快很多。因为存储过程是预编译的。<br>在首次运行一个存储过程时查询,优化器对其进行分析优化,并且给出最终被存储在系统表中的执行计划。而批处理的Transaction-SQL语句在每次运行时都要进行编译和优化,速度相对要慢一些。</p><p>(4).存储过程能过减少网络流量。针对同一个数据库对象的操作（如查询、修改）,如果这一操作所涉及的Transaction-SQL语句被组织程存储过程,那么当在客户计算机上调用该存储过程时,<br>网络中传送的只是该调用语句,从而大大增加了网络流量并降低了网络负载。</p><p>(5).存储过程可被作为一种安全机制来充分利用。系统管理员通过执行某一存储过程的权限进行限制,能够实现对相应的数据的访问权限的限制,避免了非授权用户对数据的访问,保证了数据的安全。</p><hr><h2 id="2-关于MySQL的存储过程"><a href="#2-关于MySQL的存储过程" class="headerlink" title="2.关于MySQL的存储过程"></a>2.关于MySQL的存储过程</h2><p>存储过程是数据库存储的一个重要的功能,但是MySQL在5.0以前并不支持存储过程,这使得MySQL在应用上大打折扣。好在MySQL 5.0终于开始已经支持存储过程,这样即可以大大提高数据库的处理速度,<br>同时也可以提高数据库编程的灵活性。</p><hr><h2 id="3-利用数据库可视化工具创建存储过程"><a href="#3-利用数据库可视化工具创建存储过程" class="headerlink" title="3.利用数据库可视化工具创建存储过程"></a>3.利用数据库可视化工具创建存储过程</h2><p>mysql；NAVICAT for MYSQL<br>mysql创建存储过程在网上有教程,很简单,难在如何书写存储过程语句上面.这里简单介绍一下几个书写的步骤。<br>1.在用工具创建好存储工程以后,会出现下图所示的一个begin-end区块,在其中书写存储过程语句即可。<br><img src="/2018/04/17/article5/1.PNG" title="图一"><br>也可以给区块起别名,如：<br>lable:begin<br>………..<br>end lable;<br>可以用leave lable;跳出区块,执行区块以后的代码。<br>2.首先用DECLARE关键字声明变量,格式:DECLARE 变量名 类型(长度)。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE c VARCHAR(64);DECLARE d VARCHAR(64);</span><br></pre></td></tr></table></figure></p><p>注:int类型不写长度,DEFAULT指定默认值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE done INT DEFAULT 0;</span><br></pre></td></tr></table></figure></p><p>赋值:SET 变量名 = 表达式值<br>3.声明好变量以后,如果需要游标处理,可继续声明游标。格式：<br>DECLARE 游标名 CURSOR FOR SQL语句(SELECT,UPDATE,DELETE等)。如：<br>DECLARE done INT DEFAULT 0;<br>DECLARE youbiao CURSOR FOR SELECT t.USERNAME,t.PHONENUMBER FROM t_user t WHERE t.ID=a;<br>DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;<br>注:SQL语句中的“a”参数就是在创建存储过程时的入参(IN),名称要和入参名称一致,且不用声明,存储过程有三种类型参数:IN/OUT/INOUT。<br>IN 输入参数:表示该参数的值必须在调用存储过程时指定,在存储过程中修改该参数的值不能被返回,为默认值<br>OUT 输出参数:该值可在存储过程内部被改变,并可返回。<br>INOUT 输入输出参数:调用时指定,并且可被改变和返回。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;</span><br></pre></td></tr></table></figure></p><p>此句通常为固定写法,在MYSQL的存储过程一般要设个变量来跟踪是否NOT FOUND,如:<br>DECLARE done INTEGER DEFAULT 0;<br>DECLARE CONTINUE HANDLER FOR NOT FOUND SET done=1;<br>上面这行表示若没有数据返回,程序继续执行,并将变量done设为1<br>这种情况是出现在select XX into XXX from tablename的时候发生的,这个时候如果XX是null就会有问题。当然也可以这样解决：<br>select isnull(xxxx,0) into aaaa from tableName<br>这样如果遇到null就为0了..</p><h2 id="4-声明好游标以后-要对游标进行进行处理-首先需要打开游标-格式-OPEN-游标名"><a href="#4-声明好游标以后-要对游标进行进行处理-首先需要打开游标-格式-OPEN-游标名" class="headerlink" title="4.声明好游标以后,要对游标进行进行处理,首先需要打开游标,格式:OPEN 游标名"></a>4.声明好游标以后,要对游标进行进行处理,首先需要打开游标,格式:OPEN 游标名</h2><p>OPEN是关键字,表示打开游标,开始处理游标。</p><h2 id="5-处理游标执行SQL语句后的结果集-格式"><a href="#5-处理游标执行SQL语句后的结果集-格式" class="headerlink" title="5.处理游标执行SQL语句后的结果集,格式:"></a>5.处理游标执行SQL语句后的结果集,格式:</h2><p>FETCH 游标名 INTO 变量一,变量二,变量三,变量…….;<br>表示如果是SELECT查询出的结果集,那么就将查询的结果依次赋给各个已经声明的变量,如:<br>FETCH youbiao INTO c,d;<br>就是将游标SQL语句查出的USERNAME和PHONENUMBER分别赋给c和d,c和d是已经声明的变量名。</p><h2 id="6-此处通常是对已经有值的变量-c和d-再利用SQL语句对数据库中其他表进行操作。如"><a href="#6-此处通常是对已经有值的变量-c和d-再利用SQL语句对数据库中其他表进行操作。如" class="headerlink" title="6.此处通常是对已经有值的变量(c和d)再利用SQL语句对数据库中其他表进行操作。如:"></a>6.此处通常是对已经有值的变量(c和d)再利用SQL语句对数据库中其他表进行操作。如:</h2><p>INSERT INTO t_operator(字段名1,字段名2) values (c,d);<br>此时c和d已经有值,表示将c和d的值插入到t_operator表中对应的两个字段里。<br>此处通常还涉及到一些循环处理语句或者条件语句。如:<br>a.IF-THEN-ELSE语句<br> BEGIN<br>    DECLARE var int;<br>    SET var=parameter+1;<br>    IF var=0 THEN<br>      INSERT INTO t VALUES (17);<br>    END IF ;<br>    IF parameter=0 THEN<br>      UPDATE t SET s1=s1+1;<br>    ELSE<br>      UPDATE t SET s1=s1+2;<br>    END IF ;<br>END ;<br>b.CASE-WHEN-THEN-ELSE语句<br>BEGIN<br>      DECLARE var INT;<br>      SET var=parameter+1;<br>      CASE var<br>        WHEN 0 THEN<br>          INSERT INTO t VALUES (17);<br>        WHEN 1 THEN<br>          INSERT INTO t VALUES (18);<br>        ELSE<br>          INSERT INTO t VALUES (19);<br>      END CASE ;<br>END ;<br>c.WHILE-DO…END-WHILE循环语句<br>BEGIN<br>      DECLARE var INT;<br>      SET var=0;<br>      WHILE var<6 do="" insert="" into="" t="" values="" (var);="" set="" var="var+1;" end="" while="" ;="" end;="" d.repeat...end="" repeat语句="" begin="" declare="" v="" int;="" repeat="" values(v);="" until="">=5<br>      END REPEAT;<br>END;<br>e.LOOP…END LOOP语句<br>BEGIN<br>      DECLARE v INT;<br>      SET v=0;<br>      LOOP_LABLE:LOOP<br>        INSERT INTO t VALUES(v);<br>        SET v=v+1;<br>        IF v &gt;=5 THEN<br>          LEAVE LOOP_LABLE;<br>        END IF;<br>      END LOOP;<br>END;</6></p><h2 id="7-存储过程的调用。"><a href="#7-存储过程的调用。" class="headerlink" title="7.存储过程的调用。"></a>7.存储过程的调用。</h2><p>用call和你过程名以及一个括号,括号里面根据需要,加入参数,参数包括输入参数、输出参数、输入输出参数。格式:<br>CALL 过程名(参数1,参数2,参数….)</p><h2 id="8-存储过程的修改"><a href="#8-存储过程的修改" class="headerlink" title="8.存储过程的修改"></a>8.存储过程的修改</h2><p>ALTER PROCEDURE 更改用CREATE PROCEDURE 建立的预先指定的存储过程,其不会影响相关存储过程或存储功能。</p><p>ALTER {PROCEDURE | FUNCTION} sp_name [characteristic …]<br>characteristic:<br>{ CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }<br>| SQL SECURITY { DEFINER | INVOKER }<br>| COMMENT ‘string’<br>sp_name参数表示存储过程或函数的名称；<br>characteristic参数指定存储函数的特性。<br>CONTAINS SQL表示子程序包含SQL语句,但不包含读或写数据的语句；<br>NO SQL表示子程序中不包含SQL语句；<br>READS SQL DATA表示子程序中包含读数据的语句；<br>MODIFIES SQL DATA表示子程序中包含写数据的语句。<br>SQL SECURITY { DEFINER | INVOKER }指明谁有权限来执行,DEFINER表示只有定义者自己才能够执行；INVOKER表示调用者可以执行。<br>COMMENT ‘string’是注释信息。<br>实例：</p><p>将读写权限改为MODIFIES SQL DATA,并指明调用者可以执行。<br>ALTER  PROCEDURE  num_from_employee<br>  MODIFIES SQL DATA<br>  SQL SECURITY INVOKER ;<br>将读写权限改为READS SQL DATA,并加上注释信息’FIND NAME’。<br>ALTER  PROCEDURE  name_from_employee<br>  READS SQL DATA<br>  COMMENT ‘FIND NAME’ ;</p><h2 id="9-MySQL存储过程的删除"><a href="#9-MySQL存储过程的删除" class="headerlink" title="9.MySQL存储过程的删除"></a>9.MySQL存储过程的删除</h2><p>DROP PROCEDURE [过程1[,过程2…]]<br>从MySQL的表格中删除一个或多个存储过程。</p><h2 id="10-MySQL存储过程的基本函数"><a href="#10-MySQL存储过程的基本函数" class="headerlink" title="10.MySQL存储过程的基本函数"></a>10.MySQL存储过程的基本函数</h2><p>字符串类<br>CHARSET(str) //返回字串字符集<br>CONCAT (string2 [,… ]) //连接字串<br>INSTR (string ,substring ) //返回substring首次在string中出现的位置,不存在返回0<br>LCASE (string2 ) //转换成小写<br>LEFT (string2 ,length ) //从string2中的左边起取length个字符<br>LENGTH (string ) //string长度<br>LOAD_FILE (file_name ) //从文件读取内容<br>LOCATE (substring , string [,start_position ] ) 同INSTR,但可指定开始位置<br>LPAD (string2 ,length ,pad ) //重复用pad加在string开头,直到字串长度为length<br>LTRIM (string2 ) //去除前端空格<br>REPEAT (string2 ,count ) //重复count次<br>REPLACE (str ,search_str ,replace_str ) //在str中用replace_str替换search_str<br>RPAD (string2 ,length ,pad) //在str后用pad补充,直到长度为length<br>RTRIM (string2 ) //去除后端空格<br>STRCMP (string1 ,string2 ) //逐字符比较两字串大小,<br>SUBSTRING (str , position [,length ]) //从str的position开始,取length个字符,<br>注：mysql中处理字符串时，默认第一个字符下标为1，即参数position必须大于等于1<br>TRIM([[BOTH|LEADING|TRAILING] [padding] FROM]string2) //去除指定位置的指定字符<br>UCASE (string2 ) //转换成大写<br>RIGHT(string2,length) //取string2最后length个字符<br>SPACE(count) //生成count个空格<br>数学类</p><p>ABS (number2 ) //绝对值<br>BIN (decimal_number ) //十进制转二进制<br>CEILING (number2 ) //向上取整<br>CONV(number2,from_base,to_base) //进制转换<br>FLOOR (number2 ) //向下取整<br>FORMAT (number,decimal_places ) //保留小数位数<br>HEX (DecimalNumber ) //转十六进制<br>注：HEX()中可传入字符串，则返回其ASC-11码，如HEX(‘DEF’)返回4142143<br>也可以传入十进制整数，返回其十六进制编码，如HEX(25)返回19<br>LEAST (number , number2 [,..]) //求最小值<br>MOD (numerator ,denominator ) //求余<br>POWER (number ,power ) //求指数<br>RAND([seed]) //随机数<br>ROUND (number [,decimals ]) //四舍五入,decimals为小数位数] 注：返回类型并非均为整数<br>日期时间类<br>ADDTIME (date2 ,time_interval ) //将time_interval加到date2<br>CONVERT_TZ (datetime2 ,fromTZ ,toTZ ) //转换时区<br>CURRENT_DATE ( ) //当前日期<br>CURRENT_TIME ( ) //当前时间<br>CURRENT_TIMESTAMP ( ) //当前时间戳<br>DATE (datetime ) //返回datetime的日期部分<br>DATE_ADD (date2 , INTERVAL d_value d_type ) //在date2中加上日期或时间<br>DATE_FORMAT (datetime ,FormatCodes ) //使用formatcodes格式显示datetime<br>DATE_SUB (date2 , INTERVAL d_value d_type ) //在date2上减去一个时间<br>DATEDIFF (date1 ,date2 ) //两个日期差<br>DAY (date ) //返回日期的天<br>DAYNAME (date ) //英文星期<br>DAYOFWEEK (date ) //星期(1-7) ,1为星期天<br>DAYOFYEAR (date ) //一年中的第几天<br>EXTRACT (interval_name FROM date ) //从date中提取日期的指定部分<br>MAKEDATE (year ,day ) //给出年及年中的第几天,生成日期串<br>MAKETIME (hour ,minute ,second ) //生成时间串<br>MONTHNAME (date ) //英文月份名<br>NOW ( ) //当前时间<br>SEC_TO_TIME (seconds ) //秒数转成时间<br>STR_TO_DATE (string ,format ) //字串转成时间,以format格式显示<br>TIMEDIFF (datetime1 ,datetime2 ) //两个时间差<br>TIME_TO_SEC (time ) //时间转秒数]<br>WEEK (date_time [,start_of_week ]) //第几周<br>YEAR (datetime ) //年份<br>DAYOFMONTH(datetime) //月的第几天<br>HOUR(datetime) //小时<br>LAST_DAY(date) //date的月的最后日期<br>MICROSECOND(datetime) //微秒<br>MONTH(datetime) //月<br>MINUTE(datetime) //分返回符号,正负或0<br>SQRT(number2) //开平方</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-存储过程简介&quot;&gt;&lt;a href=&quot;#1-存储过程简介&quot; class=&quot;headerlink&quot; title=&quot;1.存储过程简介&quot;&gt;&lt;/a&gt;1.存储过程简介&lt;/h2&gt;&lt;p&gt;我们常用的操作数据库语言SQL语句在执行的时候需要要先编译,然后执行,而存储过程（Store
      
    
    </summary>
    
      <category term="随笔" scheme="https://zqhf.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://zqhf.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>最短时间清楚HTTPS原理</title>
    <link href="https://zqhf.github.io/2018/04/09/article4/"/>
    <id>https://zqhf.github.io/2018/04/09/article4/</id>
    <published>2018-04-09T07:40:44.000Z</published>
    <updated>2018-04-09T08:12:31.465Z</updated>
    
    <content type="html"><![CDATA[<p>本文尝试一步步还原HTTPS的设计过程，以理解为什么HTTPS最终会是这副模样。<br>但是这并不代表HTTPS的真实设计过程。在阅读本文时，你可以尝试放下已有的对HTTPS的理解，这样更利于“还原”过程。<br>我们先不了聊HTTP，HTTPS，我们先从一个聊天软件说起，我们要实现A能发一个hello消息给B：<br><img src="/2018/04/09/article4/1.PNG" title="图一"><br>如果我们要实现这个聊天软件，本文只考虑安全性问题，要实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A发给B的hello消息包，即使被中间人拦截到了，也无法得知消息的内容</span><br></pre></td></tr></table></figure></p><h2 id="如何做到真正的安全？"><a href="#如何做到真正的安全？" class="headerlink" title="如何做到真正的安全？"></a>如何做到真正的安全？</h2><p>这个问题，很多人马上就想到了各种加密算法，什么对称加密、非对称加密、DES、RSA、XX、噼里啪啦~<br>而我想说，加密算法只是解决方案，我们首先要做的是理解我们的问题域——什么是安全？<br>我个人的理解是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A与B通信的内容，有且只有A和B有能力看到通信的真正内容</span><br></pre></td></tr></table></figure></p><p>好，问题域已经定义好了（现实中当然不止这一种定义）。对于解决方案，很容易就想到了对消息进行加密。<br>题外话，但是只有这一种方法吗？我看未必，说不定在将来会出现一种物质打破当前世界的通信假设，实现真正意义上的保密。<br>对于A与B这样的简单通信模型，我们很容易做出选择：<br><img src="/2018/04/09/article4/2.PNG" title="图二"><br>这就是对称加密算法，其中图中的密钥S同时扮演加密和解密的角色。具体细节不是本文范畴。<br>只要这个密钥S不公开给第三者，同时密钥S足够安全，我们就解决了我们一开始所定问题域了。<br>因为世界上有且只有A与B知道如何加密和解密他们之间的消息。<br>但是，在WWW环境下，我们的Web服务器的通信模型没有这么简单：<br><img src="/2018/04/09/article4/3.PNG" title="图三"><br>如果服务器端对所有的客户端通信都使用同样的对称加密算法，无异于没有加密。那怎么办呢？即能使用对称加密算法，又不公开密钥？请读者思考21秒钟。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答案是：Web服务器与每个客户端使用不同的对称加密算法：</span><br></pre></td></tr></table></figure></p><img src="/2018/04/09/article4/4.PNG" title="图四"><h2 id="如何确定对称加密算法"><a href="#如何确定对称加密算法" class="headerlink" title="如何确定对称加密算法"></a>如何确定对称加密算法</h2><p>慢着，另一个问题来了，我们的服务器端怎么告诉客户端该使用哪种对称加密算法？<br>当然是通过协商。<br><img src="/2018/04/09/article4/5.PNG" title="图五"><br>但是，你协商的过程是没有加密的，还是会被中间人拦截。<br>那我们再对这个协商过程进行对称加密就好了，那你对协商过程加密的加密还是没有加密，怎么办？再加密不就好了……好吧，进行鸡生蛋蛋生鸡的问题了。</p><h2 id="如何对协商过程进行加密"><a href="#如何对协商过程进行加密" class="headerlink" title="如何对协商过程进行加密"></a>如何对协商过程进行加密</h2><p>新问题来了，如何对协商过程进行加密？密码学领域中，有一种称为“非对称加密”的加密算法，特点是私钥加密后的密文，只要是公钥，都可以解密，<br>但是公钥加密后的密文，只有私钥可以解密。私钥只有一个人有，而公钥可以发给所有的人。<br><img src="/2018/04/09/article4/6.PNG" title="图六"><br>虽然服务器端向A、B……的方向还是不安全的，但是至少A、B向服务器端方向是安全的。<br>好了，如何协商加密算法的问题，我们解决了：使用非对称加密算法进行对称加密算法协商过程。<br>这下，你明白为什么HTTPS同时需要对称加密算法和非对称加密算法了吧？</p><h2 id="协商什么加密算法"><a href="#协商什么加密算法" class="headerlink" title="协商什么加密算法"></a>协商什么加密算法</h2><p>要达到Web服务器针对每个客户端使用不同的对称加密算法，同时，我们也不能让第三者知道这个对称加密算法是什么，怎么办？<br>使用随机数，就是使用随机数来生成对称加密算法。这样就可以做到服务器和客户端每次交互都是新的加密算法、只有在交互的那一该才确定加密算法。<br>这下，你明白为什么HTTPS协议握手阶段会有这么多的随机数了吧。</p><h2 id="如何得到公钥？"><a href="#如何得到公钥？" class="headerlink" title="如何得到公钥？"></a>如何得到公钥？</h2><p>细心的人可能已经注意到了如果使用非对称加密算法，我们的客户端A，B需要一开始就持有公钥，要不没法开展加密行为啊。<br>这下，我们又遇到新问题了，如何让A、B客户端安全地得到公钥？<br>我能想到的方案只有这些：<br>方案1. 服务器端将公钥发送给每一个客户端<br>方案2. 服务器端将公钥放到一个远程服务器，客户端可以请求得到<br>我们选择方案1，因为方案2又多了一次请求，还要另外处理公钥的放置问题。</p><h2 id="公钥被调包了怎么办？又是一个鸡生蛋蛋生鸡问题？"><a href="#公钥被调包了怎么办？又是一个鸡生蛋蛋生鸡问题？" class="headerlink" title="公钥被调包了怎么办？又是一个鸡生蛋蛋生鸡问题？"></a>公钥被调包了怎么办？又是一个鸡生蛋蛋生鸡问题？</h2><p>但是方案1有个问题：如果服务器端发送公钥给客户端时，被中间人调包了，怎么办？<br>我画了张图方便理解：<br><img src="/2018/04/09/article4/7.PNG" title="图七"><br>显然，让每个客户端的每个浏览器默认保存所有网站的公钥是不现实的。</p><h2 id="使用第三方机构的公钥解决鸡生蛋蛋生鸡问题"><a href="#使用第三方机构的公钥解决鸡生蛋蛋生鸡问题" class="headerlink" title="使用第三方机构的公钥解决鸡生蛋蛋生鸡问题"></a>使用第三方机构的公钥解决鸡生蛋蛋生鸡问题</h2><p>公钥被调包的问题出现，是因为我们的客户端无法分辨返回公钥的人到底是中间人，还是真的服务器。这其实就是密码学中提的身份验证问题。<br>如果让你来解决，你怎么解决？如果你了解过HTTPS，会知道使用数字证书来解决。但是你想过证书的本质是什么么？请放下你对HTTPS已有的知识，自己尝试找到解决方案。<br>我是这样解决的。既然服务器需要将公钥传给客户端，这个过程本身是不安全，那么我们为什么不对这个过程本身再加密一次？可是，你是使用对称加密，还是非对称加密？<br>这下好了，我感觉又进了鸡生蛋蛋生鸡问题了。问题的难点是如果我们选择直接将公钥传递给客户端的方案，我们始终无法解决公钥传递被中间人调包的问题。<br>所以，我们不能直接将服务器的公钥传递给客户端，而是第三方机构使用它的私钥对我们的公钥进行加密后，再传给客户端。客户端再使用第三方机构的公钥进行解密。<br>下图就是我们设计的第一版“数字证书”，证书中只有服务器交给第三方机构的公钥，而且这个公钥被第三方机构的私钥加密了：<br><img src="/2018/04/09/article4/8.PNG" title="图八"><br>如果能解密，就说明这个公钥没有被中间人调包。因为如果中间人使用自己的私钥加密后的东西传给客户端，客户端是无法使用第三方的公钥进行解密的。<br><img src="/2018/04/09/article4/9.PNG" title="图九"><br>话到此，我以为解决问题了。但是现实中HTTPS，还有一个数字签名的概念，我没法理解它的设计理由。<br>原来，我漏掉了一个场景：第三方机构不可能只给你一家公司制作证书，它也可能会给中间人这样有坏心思的公司发放证书。这样的，中间人就有机会对你的证书进行调包，<br>客户端在这种情况下是无法分辨出是接收的是你的证书，还是中间人的。因为不论中间人，还是你的证书，都能使用第三方机构的公钥进行解密。像下面这样：<br>第三方机构向多家公司颁发证书的情况：<br><img src="/2018/04/09/article4/10.PNG" title="图十"><br>客户端能解密同一家第三机构颁发的所有证书：<br><img src="/2018/04/09/article4/11.PNG" title="图十一"><br>最终导致其它持有同一家第三方机构证书的中间人可以进行调包：<br><img src="/2018/04/09/article4/12.PNG" title="图十二"></p><h2 id="数字签名，解决同一机构颁发的不同证书被篡改问题"><a href="#数字签名，解决同一机构颁发的不同证书被篡改问题" class="headerlink" title="数字签名，解决同一机构颁发的不同证书被篡改问题"></a>数字签名，解决同一机构颁发的不同证书被篡改问题</h2><p>要解决这个问题，我们首先要想清楚一个问题，辨别同一机构下不同证书的这个职责，我们应该放在哪？<br>只能放到客户端了。意思是，客户端在拿到证书后，自己就有能力分辨证书是否被篡改了。如何才能有这个能力呢？<br>我们从现实中找灵感。比如你是HR，你手上拿到候选人的学历证书，证书上写了持证人，颁发机构，颁发时间等等，同时证书上，还写有一个最重要的：证书编号！<br>我们怎么鉴别这张证书是的真伪呢？只要拿着这个证书编号上相关机构去查，如果证书上的持证人与现实的这个候选人一致，同时证书编号也能对应上，那么就说明这个证书是真实的。<br>我们的客户端能不能采用这个机制呢？像这样：<br><img src="/2018/04/09/article4/13.PNG" title="图十三"><br>可是，这个“第三方机构”到底是在哪呢？是一个远端服务？不可能吧？如果是个远端服务，整个交互都会慢了。<br>所以，这个第三方机构的验证功能只能放在客户端的本地了。</p><h2 id="客户端本地怎么验证证书呢？"><a href="#客户端本地怎么验证证书呢？" class="headerlink" title="客户端本地怎么验证证书呢？"></a>客户端本地怎么验证证书呢？</h2><p>客户端本地怎么验证证书呢？答案是证书本身就已经告诉客户端怎么验证证书的真伪。<br>也就是证书上写着如何根据证书的内容生成证书编号。客户端拿到证书后根据证书上的方法自己生成一个证书编号，如果生成的证书编号与证书上的证书编号相同，那么说明这个证书是真实的。<br>同时，为避免证书编号本身又被调包，所以使用第三方的私钥进行加密。<br>这地方有些抽象，我们来个图帮助理解：<br>证书的制作如图所示。证书中的“编号生成方法MD5”就是告诉客户端：你使用MD5对证书的内容求值就可以得到一个证书编号。<br><img src="/2018/04/09/article4/14.PNG" title="图十四"><br>当客户端拿到证书后，开始对证书中的内容进行验证，如果客户端计算出来的证书编号与证书中的证书编号相同，则验证通过：<br><img src="/2018/04/09/article4/15.PNG" title="图十五"><br>但是第三方机构的公钥怎么跑到了客户端的机器中呢？世界上这么多机器。<br>其实呢，现实中，浏览器和操作系统都会维护一个权威的第三方机构列表（包括它们的公钥）。<br>因为客户端接收到的证书中会写有颁发机构，客户端就根据这个颁发机构的值在本地找相应的公钥。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">题外话：如果浏览器和操作系统这道防线被破了，就没办法。想想当年自己装过的非常规XP系统，都害怕。</span><br></pre></td></tr></table></figure></p><p>说到这里，想必大家已经知道上文所说的，证书就是HTTPS中数字证书，证书编号就是数字签名，而第三方机构就是指数字证书签发机构（CA）。</p><h2 id="CA如何颁发数字证书给服务器端的？"><a href="#CA如何颁发数字证书给服务器端的？" class="headerlink" title="CA如何颁发数字证书给服务器端的？"></a>CA如何颁发数字证书给服务器端的？</h2><p>当我听到这个问题时，我误以为，我们的SERVER需要发网络请求到CA部门的服务器来拿这个证书。 到底是我理解能力问题，还是。。<br>其实，问题应该是CA如何颁发给我们的网站管理员，而我们的管理员又如何将这个数字证书放到我们的服务器上。<br>我们如何向CA申请呢？每个CA机构都大同小异，我在网上找了一个：<br><img src="/2018/04/09/article4/16.PNG" title="图十六"><br>拿到证书后，我们就可以将证书配置到自己的服务器上了。那么如何配置？这是具体细节了，留给大家google了。</p><h2 id="也许我们需要整理一下思路"><a href="#也许我们需要整理一下思路" class="headerlink" title="也许我们需要整理一下思路"></a>也许我们需要整理一下思路</h2><p>我们通过推算的方式尝试还原HTTPS的设计过程。这样，我们也就明白了为什么HTTPS比HTTP多那么多次的交互，为什么HTTPS的性能会差，以及找到HTTPS的性能优化点。<br>而上面一大堆工作都是为了让客户端与服务器端安全地协商出一个对称加密算法。这就是HTTPS中的SSL/TLS协议主要干的活。剩下的就是通信时双方使用这个对称加密算法进行加密解密。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文尝试一步步还原HTTPS的设计过程，以理解为什么HTTPS最终会是这副模样。&lt;br&gt;但是这并不代表HTTPS的真实设计过程。在阅读本文时，你可以尝试放下已有的对HTTPS的理解，这样更利于“还原”过程。&lt;br&gt;我们先不了聊HTTP，HTTPS，我们先从一个聊天软件说起，
      
    
    </summary>
    
      <category term="技术分享" scheme="https://zqhf.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="技术分享" scheme="https://zqhf.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>JAXB解析XML的几个常用注解用法讲解</title>
    <link href="https://zqhf.github.io/2018/03/27/article3/"/>
    <id>https://zqhf.github.io/2018/03/27/article3/</id>
    <published>2018-03-27T07:27:42.000Z</published>
    <updated>2018-03-27T08:44:10.910Z</updated>
    
    <content type="html"><![CDATA[<p>JAXB（即Java Architecturefor XML Binding）是一个业界的标准，即是一项可以根据XML Schema产生Java类的技术。<br>该过程中，JAXB也提供了将XML实例文档反向生成Java对象树的方法，并能将Java对象树的内容重新写到XML实例文档。<br>下面对JAXB中的几个常用注解做一下讲解说明，抛砖引玉，有不足之处，还望指出。<br>1.@XmlRootElement<br>将一个Java类映射为一段XML的根节点(根元素)，如<br>@XmlRootElement(name=”Root”)<br>public class Root{…}<br>映射为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Root&gt;&lt;/Root&gt;</span><br></pre></td></tr></table></figure></p><p>该注解接收两个参数：<br>name：定义这个根节点的名称<br>namespace：定义这个根节点的命名空间</p><hr><p>2.@XmlAccessorType<br>定义映射这个类中的何种类型需要映射到XML，该注解接收四个枚举类型的参数：<br>XmlAccessType.FIELD：java对象中的所有成员变量；<br>XmlAccessType.PROPERTY：java对象中所有通过getter/setter方式访问的成员变量；<br>XmlAccessType.PUBLIC_MEMBER：java对象中所有的public访问权限的成员变量和通过getter/setter方式访问的成员变量(默认)；<br>XmlAccessType.NONE：java对象的所有属性都不映射为xml的元素。</p><hr><p>3.@XmlType<br>该注解用在class类上，定义映射的一些相关规则，该注解接收以下几个参数：<br>propOrder        指定映射XML时的节点顺序<br>factoryClass     指定UnMarshal时生成映射类实例所需的工厂类，默认为这个类本身<br>factoryMethod  指定工厂类的工厂方法<br>name               定义XML Schema中type的名称<br>namespace      指定Schema中的命名空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*注：以上三个注解常常放在一起搭配使用。</span><br></pre></td></tr></table></figure></p><hr><p>4.@XmlElement<br>指定一个字段或get/set方法映射到XML的节点。当一个类的XmlAccessorType 被标注为PROPERTY时，在某一个没有get/set方法的字段上标注此注解，即可将该字段映射到XML。如<br>@XmlRootElement(name=”Root”)<br>public class Root{<br>@XmlElement(name = “rootChild”)<br>private String child;<br>…}映射为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Root&gt;&lt;rootChild&gt;&lt;/rootChild&gt;&lt;/Root&gt;</span><br></pre></td></tr></table></figure></p><p>该注解接收以下几个参数：<br>defaultValue  指定节点默认值<br>name          指定节点名称<br>namespace     指定节点命名空间<br>required     是否必须（默认为false）<br>nillable     该字段是否包含 nillable=”true” 属性（默认为false）<br>type        定义该字段或属性的关联类型</p><hr><p>5.@XmlAttribute<br>指定一个字段或get/set方法映射到XML的属性。如<br>@XmlRootElement(name=”Root”)<br>public class Root{<br>@XmlAttribute(name = “rootChild”)<br>private String child;<br>…}映射为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Root rootChild=&quot;&quot;&gt;&lt;/Root&gt;</span><br></pre></td></tr></table></figure></p><p>该注解接收以下几个参数：<br>name         指定属性名称<br>namespace    指定属性命名空间<br>required     是否必须（默认为false）</p><hr><p>6.@XmlTransient<br>定义某一字段或属性不需要被映射为XML。如<br>当一个类的XmlAccessorType 被标注为PROPERTY时，在某一get/set方法的字段上标注此注解，那么该属性则不会被映射,在生成的xml文件中不出现此元素。</p><hr><p>7.@XmlRegistry<br>该注解用于注册ObjectFactory工厂类，工厂类中定义了需要映射到XML文件的javaBean，如<br>@XmlRegistry<br>public class ObjectFactory<br>{</p><pre><code>public ObjectFactory(){}public Action createAction(){    return new Action();}public Rule createRule(){    return new Rule();}</code></pre><p>}<br>那么Action与Rule两个实体类在映射到XML时，可避免发生此类异常：<br>Caused by: javax.xml.bind.UnmarshalException: unexpected element (uri:””, local:”rule”). Expected elements…<br>切记，在发生上述异常时，看看@XmlRegistry注解的ObjectFactory中是否有需要映射的实体类没有被注册进去。</p><hr><p>8.@XmlSeeAlso<br>继承关系在ORM中已经处理得非常完善了，JAXB处理继承关系更加简单，只需要在继承树的根类上增加@XmlSeeAlso标注，声明所有的子类即可。 比如我们定义了一个User的子类：<br>public class MyUser extends User {…}<br>则只需要在User类上面增加标注：<br>@XmlSeeAlso({<br>    MyUser.class<br>})<br>public class User {…}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JAXB（即Java Architecturefor XML Binding）是一个业界的标准，即是一项可以根据XML Schema产生Java类的技术。&lt;br&gt;该过程中，JAXB也提供了将XML实例文档反向生成Java对象树的方法，并能将Java对象树的内容重新写到XML
      
    
    </summary>
    
      <category term="技术分享" scheme="https://zqhf.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="技术分享" scheme="https://zqhf.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的五个难点总结</title>
    <link href="https://zqhf.github.io/2018/03/22/article2/"/>
    <id>https://zqhf.github.io/2018/03/22/article2/</id>
    <published>2018-03-22T01:24:19.000Z</published>
    <updated>2018-03-22T01:43:04.870Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、立即执行函数"><a href="#1、立即执行函数" class="headerlink" title="1、立即执行函数"></a>1、立即执行函数</h3><p>立即执行函数（Immediately Invoked Function Expression），正如它的名字，就是创建函数的同时立即执行。它没有绑定任何事件，也无需等待任何异步操作，如下图：<br><img src="/2018/03/22/article2/1.PNG" title="图一"><br>function(){…}是一个匿名函数，包围它的一对括号将其转换为一个表达式， 紧跟其后的一对括号调用了这个函数。立即执行函数也可以理解为立即调用一个匿名函数。立即执行函数最常见的应用场景就是：将var变量的作用域限制于你们函数内，这样可以避免命名冲突。</p><hr><h3 id="2、闭包"><a href="#2、闭包" class="headerlink" title="2、闭包"></a>2、闭包</h3><p>对于闭包，当外部函数返回之后，内部函数依然可以访问外部函数的变量。<br><img src="/2018/03/22/article2/2.PNG" title="图二"></p><hr><h3 id="3、使用闭包定义私有变量"><a href="#3、使用闭包定义私有变量" class="headerlink" title="3、使用闭包定义私有变量"></a>3、使用闭包定义私有变量</h3><p>通常，JavaScript 开发者使用下划线作为私有变量的前缀。但是实际上，这些变量依然可以被访问和修改，并非真正的私有变量。这时，使用闭包可以定义真正的私有变量：<br><img src="/2018/03/22/article2/3.PNG" title="图三"><br>代码中，对象 p 的的 name 属性为私有属性，使用 p.name 不能直接访问。</p><hr><h3 id="4、prototype"><a href="#4、prototype" class="headerlink" title="4、prototype"></a>4、prototype</h3><p>每个 JavaScript 构造函数都有一个 prototype 属性，用于设置所有实例对象需要共享的属性和方法。prototype 属性不能列举。JavaScript 仅支持通过 prototype 属性进行继承属性和方法。<br><img src="/2018/03/22/article2/4.PNG" title="图四"><br>代码中，x 和 y 都是构造函数 Rectangle 创建的对象实例，它们通过 prototype 继承了 getDimensions 方法。</p><hr><h3 id="5、模块化"><a href="#5、模块化" class="headerlink" title="5、模块化"></a>5、模块化</h3><p>JavaScript 并非模块化编程语言，至少 ES6 落地之前都不是。然而对于一个复杂的 Web 应用，模块化编程是一个最基本的要求。这时，可以使用立即执行函数 来实现模块化，正如很多 JS 库比如 jQuery 以及我们 Fundebug 都是这样实现的。<br><img src="/2018/03/22/article2/5.PNG" title="图五"><br>所谓模块化，就是根据需要控制模块内属性与方法的可访问性，即私有或者公开。在代码中，module 为一个独立的模块，N 为其私有属性，print 为其私有方法，decription 为其公有属性，add为其共有方法。<br>本文转载自：<a href="https://www.toutiao.com/a6532059457667465731/?tt_from=android_share&amp;utm_campaign=client_share&amp;timestamp=1521681290&amp;app=news_article&amp;iid=28727997233&amp;utm_medium=toutiao_android" target="_blank" rel="noopener">https://www.toutiao.com/a6532059457667465731/?tt_from=android_share&amp;utm_campaign=client_share&amp;timestamp=1521681290&amp;app=news_article&amp;iid=28727997233&amp;utm_medium=toutiao_android</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、立即执行函数&quot;&gt;&lt;a href=&quot;#1、立即执行函数&quot; class=&quot;headerlink&quot; title=&quot;1、立即执行函数&quot;&gt;&lt;/a&gt;1、立即执行函数&lt;/h3&gt;&lt;p&gt;立即执行函数（Immediately Invoked Function Expression
      
    
    </summary>
    
      <category term="前端-JavaScript" scheme="https://zqhf.github.io/categories/%E5%89%8D%E7%AB%AF-JavaScript/"/>
    
    
      <category term="前端" scheme="https://zqhf.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>this.getHibernateTemplate().find(hql)联表查询（多对多）无响应，导致程序挂掉的问题</title>
    <link href="https://zqhf.github.io/2018/03/09/article1/"/>
    <id>https://zqhf.github.io/2018/03/09/article1/</id>
    <published>2018-03-09T08:58:25.000Z</published>
    <updated>2018-03-16T02:34:27.342Z</updated>
    
    <content type="html"><![CDATA[<p>今天在做项目解决BUG时，遇到一个小小的问题，发现用这个this.getHibernateTemplate().find(hql)方<br>法查询时，总会无响应，程序挂掉了，伤脑筋，就算改为了用SQL语句查询也是同样的问题，只能寻求帮助，在此把解决问题经验写出来，以便以后有查阅和分享。</p><h2 id="一、this-getHibernateTemplate-find-hql-查询数据可能存在的问题"><a href="#一、this-getHibernateTemplate-find-hql-查询数据可能存在的问题" class="headerlink" title="一、this.getHibernateTemplate().find(hql)查询数据可能存在的问题"></a>一、this.getHibernateTemplate().find(hql)查询数据可能存在的问题</h2><p>假设数据库有两张表分别为A和B，A和B是多对多的关系，关系维护方是表A，那么在用hibernate的<br>this.getHibernateTemplate().find(hql)联表查询时，如果表A关联的表B内容条数过多，而在表A中对表B<br>内容的加载策略设置为了急加载（Fetch.EAGER），那么查询可能就会发生无响应，程序不往下执行的问题，此时需要将加载策略改为懒加载（Fetch.LAZY），程序才能继续执行。</p><h2 id="二、懒加载与急加载区别"><a href="#二、懒加载与急加载区别" class="headerlink" title="二、懒加载与急加载区别"></a>二、懒加载与急加载区别</h2><p>如果是Fetch.LAZY，那么取出这条数据时，它关联的数据并不取出来，在同一个session中，什么时候要用，就什么时候从数据库中加载。但是，在session外，就不能再取了。用Fetch.EAGER时，因为在内存里，所以<br>在session外也可以取。如果是Fetch.EAGER，那么表示取出这条数据时，它关联的数据也同时取出放入内存中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在做项目解决BUG时，遇到一个小小的问题，发现用这个this.getHibernateTemplate().find(hql)方&lt;br&gt;法查询时，总会无响应，程序挂掉了，伤脑筋，就算改为了用SQL语句查询也是同样的问题，只能寻求帮助，在此把解决问题经验写出来，以便以后有
      
    
    </summary>
    
      <category term="技术分享" scheme="https://zqhf.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="技术分享" scheme="https://zqhf.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>个人博客--我的第一篇文章</title>
    <link href="https://zqhf.github.io/2018/03/06/postName/"/>
    <id>https://zqhf.github.io/2018/03/06/postName/</id>
    <published>2018-03-06T03:53:13.000Z</published>
    <updated>2018-03-19T02:55:32.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日心情"><a href="#今日心情" class="headerlink" title="今日心情"></a>今日心情</h2><p>一直都想拥有自己的一个博客网站，从昨天开始着手建站，一步步到发表自己的第一篇文章，心情无比激动，总算能够用博客记录人生的每一笔经历。欢迎大家关注我，来我的博客留言，一起分享你的感悟吧！</p><hr><img src="/2018/03/06/postName/example.jpg" title="面朝大海，春暖花开">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;今日心情&quot;&gt;&lt;a href=&quot;#今日心情&quot; class=&quot;headerlink&quot; title=&quot;今日心情&quot;&gt;&lt;/a&gt;今日心情&lt;/h2&gt;&lt;p&gt;一直都想拥有自己的一个博客网站，从昨天开始着手建站，一步步到发表自己的第一篇文章，心情无比激动，总算能够用博客记录人生的每一
      
    
    </summary>
    
      <category term="随笔" scheme="https://zqhf.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://zqhf.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>关于js闭包的理解和概述</title>
    <link href="https://zqhf.github.io/2018/03/05/hello-world/"/>
    <id>https://zqhf.github.io/2018/03/05/hello-world/</id>
    <published>2018-03-05T05:19:54.594Z</published>
    <updated>2018-07-19T03:50:28.055Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-变量的作用域"><a href="#一-变量的作用域" class="headerlink" title="一.变量的作用域"></a>一.变量的作用域</h3><p>要理解闭包,首先必须理解Javascript特殊的变量作用域。</p><p>变量的作用域无非就是两种：全局变量和局部变量。</p><p>Javascript语言的特殊之处,就在于函数内部可以直接读取全局变量。<br>Js代码<br>　　var n=999;</p><p>　　function f1(){<br>　　　　alert(n);<br>　　}<br>　　f1(); // 999</p><p>另一方面,在函数外部自然无法读取函数内的局部变量。<br>Js代码<br>　　function f1(){<br>　　　　var n=999;<br>　　}<br>　　alert(n); // error</p><p>这里有一个地方需要注意,函数内部声明变量的时候,一定要使用var命令。如果不用的话,你实际上声明了一个全局变量！<br>Js代码<br>　　function f1(){<br>　　　　n=999;<br>　　}<br>　　f1();<br>　　alert(n); // 999</p><hr><h3 id="二、如何从外部读取局部变量？"><a href="#二、如何从外部读取局部变量？" class="headerlink" title="二、如何从外部读取局部变量？"></a>二、如何从外部读取局部变量？</h3><p>出于种种原因,我们有时候需要得到函数内的局部变量。但是,前面已经说过了,正常情况下,这是办不到的,只有通过变通方法才能实现。<br>那就是在函数的内部,再定义一个函数。</p><p>Js代码：</p><p>　　function f1(){<br>　　　　n=999;<br>　　　　function f2(){<br>　　　　　　alert(n); // 999<br>　　　　}<br>　　}</p><p>在上面的代码中,函数f2就被包括在函数f1内部,这时f1内部的所有局部变量,对f2都是可见的。但是反过来就不行,f2内部的局部变量,对f1 就是不可见的。这就是Javascript语言特有的“链式作用域”结构（chain scope）,<br>子对象会一级一级地向上寻找所有父对象的变量。所以,父对象的所有变量,对子对象都是可见的,反之则不成立。<br>既然f2可以读取f1中的局部变量,那么只要把f2作为返回值,我们不就可以在f1外部读取它的内部变量了吗！</p><p>Js代码</p><p>　　function f1(){<br>　　　　n=999;<br>　　　　function f2(){<br>　　　　　　alert(n);<br>　　　　}<br>　　　　return f2;<br>　　}<br>　　var result=f1();</p><p>　　result(); // 999</p><hr><h3 id="三、闭包的概念"><a href="#三、闭包的概念" class="headerlink" title="三、闭包的概念"></a>三、闭包的概念</h3><p>上一节代码中的f2函数,就是闭包。</p><p>各种专业文献上的“闭包”（closure）定义非常抽象,很难看懂。我的理解是,闭包就是能够读取其他函数内部变量的函数。</p><p>由于在Javascript语言中,只有函数内部的子函数才能读取局部变量,因此可以把闭包简单理解成“定义在一个函数内部的函数”。</p><p>所以,在本质上,闭包就是将函数内部和函数外部连接起来的一座桥梁。</p><hr><h3 id="四、闭包的用途"><a href="#四、闭包的用途" class="headerlink" title="四、闭包的用途"></a>四、闭包的用途</h3><p>闭包可以用在许多地方。它的最大用处有两个,一个是前面提到的可以读取函数内部的变量,另一个就是让这些变量的值始终保持在内存中。<br>怎么来理解这句话呢？请看下面的代码。</p><p>Js代码</p><p>　　function f1(){<br>　　　　var n=999;<br>　　　　nAdd=function(){n+=1}<br>　　　　function f2(){<br>　　　　　　alert(n);<br>　　　　}<br>　　　　return f2;<br>　　}</p><p>　　var result=f1();</p><p>　　result(); // 999</p><p>　　nAdd();</p><p>　　result(); // 1000</p><p>在这段代码中,result实际上就是闭包f2函数。它一共运行了两次,第一次的值是999,第二次的值是1000。这证明了,函数f1中的局部变量n一直保存在内存中,并没有在f1调用后被自动清除。</p><p>为什么会这样呢？原因就在于f1是f2的父函数,而f2被赋给了一个全局变量,这导致f2始终在内存中,而f2的存在依赖于f1,因此f1也始终在内存中,不会在调用结束后,被垃圾回收机制（garbage collection）回收。</p><p>这段代码中另一个值得注意的地方,就是“nAdd=function(){n+=1}”这一行,首先在nAdd前面没有使用var关键字,因此 nAdd是一个全局变量,而不是局部变量。其次,nAdd的值是一个匿名函数（anonymous function）,而这个<br>匿名函数本身也是一个闭包,所以nAdd相当于是一个setter,可以在函数外部对函数内部的局部变量进行操作。</p><hr><h3 id="五、思考题"><a href="#五、思考题" class="headerlink" title="五、思考题"></a>五、思考题</h3><p>如果你能理解下面代码的运行结果,应该就算理解闭包的运行机制了。</p><p>Js代码<br>　　var name = “The Window”;<br>　　var object = {<br>　　　　name : “My Object”,<br>　　　　getNameFunc : function(){<br>　　　　　　return function(){<br>　　　　　　　　return this.name;<br>　　　　　};<br>　　　　}<br>};<br>alert(object.getNameFunc()());  //The Window</p><hr><p>JavaScript闭包例子</p><p>function outerFun()<br> {<br>  var a=0;<br>  function innerFun()<br>  {<br>   a++;<br>   alert(a);<br>  }<br> }<br>innerFun()</p><p>上面的代码是错误的.innerFun()的作用域在outerFun()内部,所在outerFun()外部调用它是错误的。</p><p>改成如下,也就是闭包:</p><p>Js代码</p><p>function outerFun()<br>{<br> var a=0;<br> function innerFun()<br> {<br>  a++;<br>  alert(a);<br> }<br> return innerFun;  //注意这里<br>}<br>var obj=outerFun();<br>obj();  //结果为1<br>obj();  //结果为2<br>var obj2=outerFun();<br>obj2();  //结果为1<br>obj2();  //结果为2</p><p>什么是闭包:</p><p>当内部函数 在定义它的作用域 的外部 被引用时,就创建了该内部函数的闭包 ,如果内部函数引用了位于外部函数的变量,当外部函数调用完毕后,这些变量在内存不会被 释放,因为闭包需要它们。</p><hr><p>再来看一个例子</p><p>Js代码</p><p>function outerFun()<br>{<br> var a =0;<br> alert(a);<br>}<br>var a=4;<br>outerFun();<br>alert(a);</p><p>结果是 0,4 .  因为在函数内部使用了var关键字 维护a的作用域在outFun()内部。</p><p>再看下面的代码:</p><p>Js代码 </p><p>function outerFun()<br>{<br> //没有var<br> a =0;<br> alert(a);<br>}<br>var a=4;<br>outerFun();<br>alert(a);<br>结果为 0,0 真是奇怪,为什么呢?</p><p>作用域链是描述一种路径的术语,沿着该路径可以确定变量的值 .当执行a=0时,因为没有使用var关键字,因此赋值操作会沿着作用域链到var a=4;  并改变其值。</p><hr><p>如果你对javascript闭包还不是很理解,那么请看下面转载的文章：(转载:<a href="http://www.felixwoo.com/archives/247" target="_blank" rel="noopener">http://www.felixwoo.com/archives/247</a>)</p><h3 id="一、什么是闭包？"><a href="#一、什么是闭包？" class="headerlink" title="一、什么是闭包？"></a>一、什么是闭包？</h3><p>官方”的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数）,因而这些变量也是该表达式的一部分。<br>相信很少有人能直接看懂这句话,因为他描述的太学术。其实这句话通俗的来说就是：JavaScript中所有的function都是一个闭包。不过一般来说,嵌套的function所产生的闭包更为强大,也是大部分时候我们所谓的“闭包”。看下面这段代码：</p><p>function a() {<br> var i = 0;<br> function b() { alert(++i); }<br> return b;<br>}<br>var c = a();<br>c();<br>这段代码有两个特点：</p><p>1、函数b嵌套在函数a内部；</p><p>2、函数a返回函数b。<br>这样在执行完var c=a()后,变量c实际上是指向了函数b,再执行c()后就会弹出一个窗口显示i的值(第一次为1)。这段代码其实就创建了一个闭包,为什么？因为函数a外的变量c引用了函数a内的函数b,就是说：</p><h4 id="当函数a的内部函数b被函数a外的一个变量引用的时候-就创建了一个闭包。"><a href="#当函数a的内部函数b被函数a外的一个变量引用的时候-就创建了一个闭包。" class="headerlink" title="当函数a的内部函数b被函数a外的一个变量引用的时候,就创建了一个闭包。"></a>当函数a的内部函数b被函数a外的一个变量引用的时候,就创建了一个闭包。</h4><p>让我们说的更透彻一些。所谓“闭包”,就是在构造函数体内定义另外的函数作为目标对象的方法函数,而这个对象的方法函数反过来引用外层函数体中的临时变量。这使得只要目标 对象在生存期内始终能保持其方法,就能间接保持原构造函数体当时用到的临时变量值。尽管最开始的构造函数调用已经结束,临时变量的名称也都消失了,但在目 标对象的方法内却始终能引用到该变量的值,而且该值只能通这种方法来访问。即使再次调用相同的构造函数,但只会生成新对象和方法,新的临时变量只是对应新 的值,和上次那次调用的是各自独立的。</p><hr><h3 id="二、闭包有什么作用？"><a href="#二、闭包有什么作用？" class="headerlink" title="二、闭包有什么作用？"></a>二、闭包有什么作用？</h3><p>简而言之,闭包的作用就是在a执行完并返回后,闭包使得Javascript的垃圾回收机制GC不会收回a所占用的资源,因为a的内部函数b的执行需要依赖a中的变量。这是对闭包作用的非常直白的描述,不专业也不严谨,但大概意思就是这样,理解闭包需要循序渐进的过程。</p><p>在上面的例子中,由于闭包的存在使得函数a返回后,a中的i始终存在,这样每次执行c(),i都是自加1后alert出i的值。</p><p>那 么我们来想象另一种情况,如果a返回的不是函数b,情况就完全不同了。因为a执行完后,b没有被返回给a的外界,只是被a所引用,而此时a也只会被b引 用,因此函数a和b互相引用但又不被外界打扰(被外界引用),函数a和b就会被GC回收。</p><hr><h3 id="三、闭包的应用场景"><a href="#三、闭包的应用场景" class="headerlink" title="三、闭包的应用场景"></a>三、闭包的应用场景</h3><h4 id="1-保护函数内的变量安全。以最开始的例子为例-函数a中i只有函数b才能访问-而无法通过其他途径访问到-因此保护了i的安全性。"><a href="#1-保护函数内的变量安全。以最开始的例子为例-函数a中i只有函数b才能访问-而无法通过其他途径访问到-因此保护了i的安全性。" class="headerlink" title="1.保护函数内的变量安全。以最开始的例子为例,函数a中i只有函数b才能访问,而无法通过其他途径访问到,因此保护了i的安全性。"></a>1.保护函数内的变量安全。以最开始的例子为例,函数a中i只有函数b才能访问,而无法通过其他途径访问到,因此保护了i的安全性。</h4><h4 id="2-在内存中维持一个变量。依然如前例-由于闭包-函数a中i的一直存在于内存中-因此每次执行c-都会给i自加1。"><a href="#2-在内存中维持一个变量。依然如前例-由于闭包-函数a中i的一直存在于内存中-因此每次执行c-都会给i自加1。" class="headerlink" title="2.在内存中维持一个变量。依然如前例,由于闭包,函数a中i的一直存在于内存中,因此每次执行c(),都会给i自加1。"></a>2.在内存中维持一个变量。依然如前例,由于闭包,函数a中i的一直存在于内存中,因此每次执行c(),都会给i自加1。</h4><h4 id="3-通过保护变量的安全实现JS私有属性和私有方法（不能被外部访问）。"><a href="#3-通过保护变量的安全实现JS私有属性和私有方法（不能被外部访问）。" class="headerlink" title="3.通过保护变量的安全实现JS私有属性和私有方法（不能被外部访问）。"></a>3.通过保护变量的安全实现JS私有属性和私有方法（不能被外部访问）。</h4><p>function Constructor(…) {<br>  var that = this;<br>  var membername = value;<br>  function membername(…) {…}<br>}</p><p>以上3点是闭包最基本的应用场景,很多经典案例都源于此。</p><hr><h3 id="四、Javascript的垃圾回收机制"><a href="#四、Javascript的垃圾回收机制" class="headerlink" title="四、Javascript的垃圾回收机制"></a>四、Javascript的垃圾回收机制</h3><p>在Javascript中,如果一个对象不再被引用,那么这个对象就会被GC回收。如果两个对象互相引用,而不再被第3者所引用,那么这两个互相引用的对象也会被回收。因为函数a被b引用,b又被a外的c引用,这就是为什么函数a执行后不会被回收的原因。</p><hr><h3 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h3><p>理解JavaScript的闭包是迈向高级JS程序员的必经之路,理解了其解释和运行机制才能写出更为安全和优雅的代码。</p><hr><p>本文转载自：<a href="http://www.jb51.net/article/24101.htm" target="_blank" rel="noopener">http://www.jb51.net/article/24101.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-变量的作用域&quot;&gt;&lt;a href=&quot;#一-变量的作用域&quot; class=&quot;headerlink&quot; title=&quot;一.变量的作用域&quot;&gt;&lt;/a&gt;一.变量的作用域&lt;/h3&gt;&lt;p&gt;要理解闭包,首先必须理解Javascript特殊的变量作用域。&lt;/p&gt;
&lt;p&gt;变量的作用域无
      
    
    </summary>
    
      <category term="前端-JavaScript" scheme="https://zqhf.github.io/categories/%E5%89%8D%E7%AB%AF-JavaScript/"/>
    
    
      <category term="前端" scheme="https://zqhf.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
